/* (C) 2021 DragonSkulle */
package org.dragonskulle.components;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import org.dragonskulle.core.GameObject;
import org.joml.AxisAngle4f;
import org.joml.Matrix4f;
import org.joml.Matrix4fc;
import org.joml.Quaternionf;
import org.joml.Vector3f;
import org.junit.Test;

// The below tests were generated by https://www.diffblue.com/

public class DiffBlueTransform3DTest {
    @Test
    public void testSetPosition() {
        Transform3D transform3D = new Transform3D();
        transform3D.setPosition(10.0f, 10.0f, 10.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalPosition()).y, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalPosition()).x, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalPosition()).z, 0.0f);
    }

    @Test
    public void testSetPosition2() {
        Transform3D transform3D = new Transform3D();
        transform3D.setPosition(new Vector3f(10.0f));
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalPosition()).x, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalPosition()).y, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalPosition()).z, 0.0f);
    }

    @Test
    public void testSetRotation() {
        Transform3D transform3D = new Transform3D();
        transform3D.setRotation(10.0f, 10.0f, 10.0f);
        assertEquals(-0.33799654f, ((Quaternionf) transform3D.getLocalRotation()).z, 0.0f);
        assertEquals(0.1836784f, ((Quaternionf) transform3D.getLocalRotation()).y, 0.0f);
        assertEquals(-0.33799654f, ((Quaternionf) transform3D.getLocalRotation()).x, 0.0f);
        assertEquals(-0.8589406f, ((Quaternionf) transform3D.getLocalRotation()).w, 0.0f);
    }

    @Test
    public void testSetRotation2() {
        Transform3D transform3D = new Transform3D();
        transform3D.setRotation(new Quaternionf(2.0, 3.0, 10.0, 10.0));
        assertEquals(10.0f, ((Quaternionf) transform3D.getLocalRotation()).z, 0.0f);
        assertEquals(3.0f, ((Quaternionf) transform3D.getLocalRotation()).y, 0.0f);
        assertEquals(
                TransformHex.HEX_HEIGHT, ((Quaternionf) transform3D.getLocalRotation()).x, 0.0f);
        assertEquals(10.0f, ((Quaternionf) transform3D.getLocalRotation()).w, 0.0f);
    }

    @Test
    public void testSetRotation3() {
        Transform3D transform3D = new Transform3D();
        transform3D.setRotation(new Vector3f(10.0f));
        assertEquals(-0.33799654f, ((Quaternionf) transform3D.getLocalRotation()).z, 0.0f);
        assertEquals(0.1836784f, ((Quaternionf) transform3D.getLocalRotation()).y, 0.0f);
        assertEquals(-0.33799654f, ((Quaternionf) transform3D.getLocalRotation()).x, 0.0f);
        assertEquals(-0.8589406f, ((Quaternionf) transform3D.getLocalRotation()).w, 0.0f);
    }

    @Test
    public void testSetRotationDeg() {
        Transform3D transform3D = new Transform3D();
        transform3D.setRotationDeg(10.0f, 10.0f, 10.0f);
        assertEquals(0.078926474f, ((Quaternionf) transform3D.getLocalRotation()).z, 0.0f);
        assertEquals(0.09406091f, ((Quaternionf) transform3D.getLocalRotation()).y, 0.0f);
        assertEquals(0.078926474f, ((Quaternionf) transform3D.getLocalRotation()).x, 0.0f);
        assertEquals(0.9892896f, ((Quaternionf) transform3D.getLocalRotation()).w, 0.0f);
    }

    @Test
    public void testSetRotationDeg2() {
        Transform3D transform3D = new Transform3D();
        transform3D.setRotationDeg(new Vector3f(10.0f));
        assertEquals(0.078926474f, ((Quaternionf) transform3D.getLocalRotation()).z, 0.0f);
        assertEquals(0.09406091f, ((Quaternionf) transform3D.getLocalRotation()).y, 0.0f);
        assertEquals(0.078926474f, ((Quaternionf) transform3D.getLocalRotation()).x, 0.0f);
        assertEquals(0.9892896f, ((Quaternionf) transform3D.getLocalRotation()).w, 0.0f);
    }

    @Test
    public void testRotateRad() {
        Transform3D transform3D = new Transform3D();
        transform3D.rotateRad(10.0f, 10.0f, 10.0f);
        assertEquals(0.1836784f, ((Quaternionf) transform3D.getLocalRotation()).z, 0.0f);
        assertEquals(-0.33799654f, ((Quaternionf) transform3D.getLocalRotation()).y, 0.0f);
        assertEquals(0.18367839f, ((Quaternionf) transform3D.getLocalRotation()).x, 0.0f);
        assertEquals(0.9045899f, ((Quaternionf) transform3D.getLocalRotation()).w, 0.0f);
    }

    @Test
    public void testRotateRad2() {
        Transform3D transform3D = new Transform3D();
        transform3D.rotateRad(new Vector3f(10.0f));
        assertEquals(0.1836784f, ((Quaternionf) transform3D.getLocalRotation()).z, 0.0f);
        assertEquals(-0.33799654f, ((Quaternionf) transform3D.getLocalRotation()).y, 0.0f);
        assertEquals(0.18367839f, ((Quaternionf) transform3D.getLocalRotation()).x, 0.0f);
        assertEquals(0.9045899f, ((Quaternionf) transform3D.getLocalRotation()).w, 0.0f);
    }

    @Test
    public void testRotateDeg() {
        Transform3D transform3D = new Transform3D();
        transform3D.rotateDeg(10.0f, 10.0f, 10.0f);
        assertEquals(0.09406091f, ((Quaternionf) transform3D.getLocalRotation()).z, 0.0f);
        assertEquals(0.078926474f, ((Quaternionf) transform3D.getLocalRotation()).y, 0.0f);
        assertEquals(0.09406091f, ((Quaternionf) transform3D.getLocalRotation()).x, 0.0f);
        assertEquals(0.9879655f, ((Quaternionf) transform3D.getLocalRotation()).w, 0.0f);
    }

    @Test
    public void testRotate() {
        Transform3D transform3D = new Transform3D();
        transform3D.rotate(new Quaternionf(2.0, 3.0, 10.0, 10.0));
        assertEquals(10.0f, ((Quaternionf) transform3D.getLocalRotation()).z, 0.0f);
        assertEquals(3.0f, ((Quaternionf) transform3D.getLocalRotation()).y, 0.0f);
        assertEquals(
                TransformHex.HEX_HEIGHT, ((Quaternionf) transform3D.getLocalRotation()).x, 0.0f);
        assertEquals(10.0f, ((Quaternionf) transform3D.getLocalRotation()).w, 0.0f);
    }

    @Test
    public void testTranslate() {
        Transform3D transform3D = new Transform3D();
        transform3D.translate(10.0f, 10.0f, 10.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalPosition()).y, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalPosition()).x, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalPosition()).z, 0.0f);
    }

    @Test
    public void testTranslate2() {
        Transform3D transform3D = new Transform3D();
        transform3D.translate(new Vector3f(10.0f));
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalPosition()).x, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalPosition()).y, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalPosition()).z, 0.0f);
    }

    @Test
    public void testTranslateLocal() {
        Transform3D transform3D = new Transform3D();
        transform3D.translateLocal(10.0f, 10.0f, 10.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalPosition()).y, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalPosition()).x, 0.0f);
        assertEquals(TransformHex.HEX_SIZE, ((Vector3f) transform3D.getLocalForward()).y, 0.0f);
        assertEquals(0.0f, ((Vector3f) transform3D.getLocalForward()).x, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalPosition()).z, 0.0f);
        assertEquals(0.0f, ((Vector3f) transform3D.getLocalForward()).z, 0.0f);
    }

    @Test
    public void testGetLocalForward() {
        assertEquals(0.0f, ((Vector3f) (new Transform3D()).getLocalForward()).z, 0.0f);
        assertEquals(
                TransformHex.HEX_SIZE, ((Vector3f) (new Transform3D()).getLocalForward()).y, 0.0f);
        assertEquals(0.0f, ((Vector3f) (new Transform3D()).getLocalForward()).x, 0.0f);
    }

    @Test
    public void testScale() {
        Transform3D transform3D = new Transform3D();
        transform3D.scale(10.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalScale()).z, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalScale()).y, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalScale()).x, 0.0f);
    }

    @Test
    public void testScale2() {
        Transform3D transform3D = new Transform3D();
        transform3D.scale(10.0f, 10.0f, 10.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalScale()).z, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalScale()).y, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalScale()).x, 0.0f);
    }

    @Test
    public void testScale3() {
        Transform3D transform3D = new Transform3D();
        transform3D.scale(new Vector3f(10.0f));
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalScale()).y, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalScale()).x, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalScale()).z, 0.0f);
    }

    @Test
    public void testSetScale() {
        Transform3D transform3D = new Transform3D();
        transform3D.setScale(10.0f, 10.0f, 10.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalScale()).z, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalScale()).y, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalScale()).x, 0.0f);
    }

    @Test
    public void testGetLocalMatrix() {
        Matrix4fc actualLocalMatrix = (new Transform3D()).getLocalMatrix();
        assertEquals(18, actualLocalMatrix.properties());
        assertEquals(TransformHex.HEX_SIZE, actualLocalMatrix.m33(), 0.0f);
        assertEquals(0.0f, actualLocalMatrix.m32(), 0.0f);
        assertEquals(0.0f, actualLocalMatrix.m31(), 0.0f);
        assertEquals(0.0f, actualLocalMatrix.m30(), 0.0f);
        assertEquals(0.0f, actualLocalMatrix.m23(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, actualLocalMatrix.m22(), 0.0f);
        assertEquals(0.0f, actualLocalMatrix.m21(), 0.0f);
        assertEquals(0.0f, actualLocalMatrix.m20(), 0.0f);
        assertEquals(0.0f, actualLocalMatrix.m13(), 0.0f);
        assertEquals(0.0f, actualLocalMatrix.m12(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, actualLocalMatrix.m11(), 0.0f);
        assertEquals(0.0f, actualLocalMatrix.m10(), 0.0f);
        assertEquals(0.0f, actualLocalMatrix.m03(), 0.0f);
        assertEquals(0.0f, actualLocalMatrix.m02(), 0.0f);
        assertEquals(0.0f, actualLocalMatrix.m01(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, actualLocalMatrix.m00(), 0.0f);
    }

    @Test
    public void testGetLocalMatrix2() {
        Transform3D transform3D = new Transform3D();
        Matrix4f matrix4f =
                new Matrix4f(
                        10.0f, 10.0f, 10.0f, 10.0f, 10.0f, 10.0f, 10.0f, 10.0f, 10.0f, 10.0f, 10.0f,
                        10.0f, 10.0f, 10.0f, 10.0f, 10.0f);
        transform3D.getLocalMatrix(matrix4f);
        assertEquals(18, matrix4f.properties());
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m33(), 0.0f);
        assertEquals(0.0f, matrix4f.m32(), 0.0f);
        assertEquals(0.0f, matrix4f.m31(), 0.0f);
        assertEquals(0.0f, matrix4f.m30(), 0.0f);
        assertEquals(0.0f, matrix4f.m23(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m22(), 0.0f);
        assertEquals(0.0f, matrix4f.m21(), 0.0f);
        assertEquals(0.0f, matrix4f.m20(), 0.0f);
        assertEquals(0.0f, matrix4f.m13(), 0.0f);
        assertEquals(0.0f, matrix4f.m12(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m11(), 0.0f);
        assertEquals(0.0f, matrix4f.m10(), 0.0f);
        assertEquals(0.0f, matrix4f.m03(), 0.0f);
        assertEquals(0.0f, matrix4f.m02(), 0.0f);
        assertEquals(0.0f, matrix4f.m01(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m00(), 0.0f);
        Matrix4fc localMatrix = transform3D.getLocalMatrix();
        assertTrue(localMatrix instanceof Matrix4f);
        assertEquals(transform3D.mWorldMatrix, localMatrix);
    }

    @Test
    public void testGetLocalRotationAngles() {
        AxisAngle4f actualLocalRotationAngles = (new Transform3D()).getLocalRotationAngles();
        assertEquals(Float.NaN, actualLocalRotationAngles.z, 0.0f);
        assertEquals(Float.NaN, actualLocalRotationAngles.y, 0.0f);
        assertEquals(Float.NaN, actualLocalRotationAngles.x, 0.0f);
        assertEquals(0.0f, actualLocalRotationAngles.angle, 0.0f);
    }

    @Test
    public void testGetLocalRotationAngles2() {
        Transform3D transform3D = new Transform3D();
        AxisAngle4f axisAngle4f = new AxisAngle4f(10.0f, 10.0f, 10.0f, 10.0f);
        transform3D.getLocalRotationAngles(axisAngle4f);
        assertEquals(Float.NaN, axisAngle4f.z, 0.0f);
        assertEquals(Float.NaN, axisAngle4f.y, 0.0f);
        assertEquals(Float.NaN, axisAngle4f.x, 0.0f);
        assertEquals(0.0f, axisAngle4f.angle, 0.0f);
    }

    @Test
    public void testGetLocalPosition() {
        Transform3D transform3D = new Transform3D();
        Vector3f vector3f = new Vector3f(10.0f);
        transform3D.getLocalPosition(vector3f);
        assertEquals(0.0f, vector3f.z, 0.0f);
        assertEquals(0.0f, vector3f.y, 0.0f);
        assertEquals(0.0f, vector3f.x, 0.0f);
    }

    @Test
    public void testGetLocalScale() {
        Transform3D transform3D = new Transform3D();
        Vector3f vector3f = new Vector3f(10.0f);
        transform3D.getLocalScale(vector3f);
        assertEquals(TransformHex.HEX_SIZE, vector3f.z, 0.0f);
        assertEquals(TransformHex.HEX_SIZE, vector3f.y, 0.0f);
        assertEquals(TransformHex.HEX_SIZE, vector3f.x, 0.0f);
    }

    @Test
    public void testGetWorldMatrix() {
        Transform3D transform3D = new Transform3D();
        Matrix4fc actualWorldMatrix = transform3D.getWorldMatrix();
        assertSame(transform3D.mWorldMatrix, actualWorldMatrix);
        assertEquals(18, actualWorldMatrix.properties());
        assertEquals(TransformHex.HEX_SIZE, actualWorldMatrix.m33(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m32(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m31(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m30(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m23(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, actualWorldMatrix.m22(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m21(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m20(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m13(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m12(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, actualWorldMatrix.m11(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m10(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m03(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m02(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m01(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, actualWorldMatrix.m00(), 0.0f);
        Matrix4fc localMatrix = transform3D.getLocalMatrix();
        assertTrue(localMatrix instanceof Matrix4f);
        assertEquals(actualWorldMatrix, localMatrix);
        assertFalse(transform3D.mShouldUpdate);
    }

    @Test
    public void testGetWorldMatrix2() {
        Transform3D transform3D = new Transform3D();
        transform3D.setGameObject(new GameObject("Name"));
        Matrix4fc actualWorldMatrix = transform3D.getWorldMatrix();
        assertSame(transform3D.mWorldMatrix, actualWorldMatrix);
        assertEquals(18, actualWorldMatrix.properties());
        assertEquals(TransformHex.HEX_SIZE, actualWorldMatrix.m33(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m32(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m31(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m30(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m23(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, actualWorldMatrix.m22(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m21(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m20(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m13(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m12(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, actualWorldMatrix.m11(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m10(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m03(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m02(), 0.0f);
        assertEquals(0.0f, actualWorldMatrix.m01(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, actualWorldMatrix.m00(), 0.0f);
        Matrix4fc localMatrix = transform3D.getLocalMatrix();
        assertTrue(localMatrix instanceof Matrix4f);
        assertEquals(actualWorldMatrix, localMatrix);
        assertFalse(transform3D.mShouldUpdate);
    }

    @Test
    public void testGetRotationAngles() {
        Transform3D transform3D = new Transform3D();
        AxisAngle4f actualRotationAngles = transform3D.getRotationAngles();
        assertEquals(TransformHex.HEX_SIZE, actualRotationAngles.z, 0.0f);
        assertEquals(0.0f, actualRotationAngles.y, 0.0f);
        assertEquals(0.0f, actualRotationAngles.x, 0.0f);
        assertEquals(3.1415927f, actualRotationAngles.angle, 0.0f);
        Matrix4fc localMatrix = transform3D.getLocalMatrix();
        assertTrue(localMatrix instanceof Matrix4f);
        assertFalse(transform3D.mShouldUpdate);
        Matrix4f matrix4f = transform3D.mWorldMatrix;
        assertEquals(matrix4f, localMatrix);
        assertEquals(0.0f, matrix4f.m32(), 0.0f);
        assertEquals(0.0f, matrix4f.m31(), 0.0f);
        assertEquals(0.0f, matrix4f.m30(), 0.0f);
        assertEquals(0.0f, matrix4f.m23(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m22(), 0.0f);
        assertEquals(0.0f, matrix4f.m21(), 0.0f);
        assertEquals(0.0f, matrix4f.m20(), 0.0f);
        assertEquals(0.0f, matrix4f.m13(), 0.0f);
        assertEquals(0.0f, matrix4f.m12(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m11(), 0.0f);
        assertEquals(0.0f, matrix4f.m10(), 0.0f);
        assertEquals(0.0f, matrix4f.m03(), 0.0f);
        assertEquals(0.0f, matrix4f.m02(), 0.0f);
        assertEquals(0.0f, matrix4f.m01(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m00(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m33(), 0.0f);
        assertEquals(18, matrix4f.properties());
    }

    @Test
    public void testGetRotationAngles2() {
        Transform3D transform3D = new Transform3D();
        transform3D.setGameObject(new GameObject("Name"));
        AxisAngle4f actualRotationAngles = transform3D.getRotationAngles();
        assertEquals(TransformHex.HEX_SIZE, actualRotationAngles.z, 0.0f);
        assertEquals(0.0f, actualRotationAngles.y, 0.0f);
        assertEquals(0.0f, actualRotationAngles.x, 0.0f);
        assertEquals(3.1415927f, actualRotationAngles.angle, 0.0f);
        Matrix4fc localMatrix = transform3D.getLocalMatrix();
        assertTrue(localMatrix instanceof Matrix4f);
        assertFalse(transform3D.mShouldUpdate);
        Matrix4f matrix4f = transform3D.mWorldMatrix;
        assertEquals(matrix4f, localMatrix);
        assertEquals(0.0f, matrix4f.m32(), 0.0f);
        assertEquals(0.0f, matrix4f.m31(), 0.0f);
        assertEquals(0.0f, matrix4f.m30(), 0.0f);
        assertEquals(0.0f, matrix4f.m23(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m22(), 0.0f);
        assertEquals(0.0f, matrix4f.m21(), 0.0f);
        assertEquals(0.0f, matrix4f.m20(), 0.0f);
        assertEquals(0.0f, matrix4f.m13(), 0.0f);
        assertEquals(0.0f, matrix4f.m12(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m11(), 0.0f);
        assertEquals(0.0f, matrix4f.m10(), 0.0f);
        assertEquals(0.0f, matrix4f.m03(), 0.0f);
        assertEquals(0.0f, matrix4f.m02(), 0.0f);
        assertEquals(0.0f, matrix4f.m01(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m00(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m33(), 0.0f);
        assertEquals(18, matrix4f.properties());
    }

    @Test
    public void testGetRotationAngles3() {
        Transform3D transform3D = new Transform3D();
        AxisAngle4f axisAngle4f = new AxisAngle4f(10.0f, 10.0f, 10.0f, 10.0f);
        transform3D.getRotationAngles(axisAngle4f);
        assertEquals(TransformHex.HEX_SIZE, axisAngle4f.z, 0.0f);
        assertEquals(0.0f, axisAngle4f.y, 0.0f);
        assertEquals(0.0f, axisAngle4f.x, 0.0f);
        assertEquals(3.1415927f, axisAngle4f.angle, 0.0f);
        Matrix4fc localMatrix = transform3D.getLocalMatrix();
        assertTrue(localMatrix instanceof Matrix4f);
        assertFalse(transform3D.mShouldUpdate);
        Matrix4f matrix4f = transform3D.mWorldMatrix;
        assertEquals(matrix4f, localMatrix);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m33(), 0.0f);
        assertEquals(0.0f, matrix4f.m32(), 0.0f);
        assertEquals(0.0f, matrix4f.m31(), 0.0f);
        assertEquals(0.0f, matrix4f.m30(), 0.0f);
        assertEquals(0.0f, matrix4f.m23(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m22(), 0.0f);
        assertEquals(0.0f, matrix4f.m21(), 0.0f);
        assertEquals(0.0f, matrix4f.m20(), 0.0f);
        assertEquals(0.0f, matrix4f.m13(), 0.0f);
        assertEquals(0.0f, matrix4f.m12(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m11(), 0.0f);
        assertEquals(0.0f, matrix4f.m10(), 0.0f);
        assertEquals(0.0f, matrix4f.m03(), 0.0f);
        assertEquals(0.0f, matrix4f.m02(), 0.0f);
        assertEquals(0.0f, matrix4f.m01(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m00(), 0.0f);
        assertEquals(18, matrix4f.properties());
    }

    @Test
    public void testGetScale() {
        Transform3D transform3D = new Transform3D();
        Vector3f actualScale = transform3D.getScale();
        assertEquals(TransformHex.HEX_SIZE, actualScale.z, 0.0f);
        assertEquals(TransformHex.HEX_SIZE, actualScale.y, 0.0f);
        assertEquals(TransformHex.HEX_SIZE, actualScale.x, 0.0f);
        Matrix4fc localMatrix = transform3D.getLocalMatrix();
        assertTrue(localMatrix instanceof Matrix4f);
        assertFalse(transform3D.mShouldUpdate);
        Matrix4f matrix4f = transform3D.mWorldMatrix;
        assertEquals(matrix4f, localMatrix);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m22(), 0.0f);
        assertEquals(0.0f, matrix4f.m21(), 0.0f);
        assertEquals(0.0f, matrix4f.m20(), 0.0f);
        assertEquals(0.0f, matrix4f.m13(), 0.0f);
        assertEquals(0.0f, matrix4f.m12(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m11(), 0.0f);
        assertEquals(0.0f, matrix4f.m10(), 0.0f);
        assertEquals(0.0f, matrix4f.m03(), 0.0f);
        assertEquals(0.0f, matrix4f.m02(), 0.0f);
        assertEquals(0.0f, matrix4f.m01(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m00(), 0.0f);
        assertSame(matrix4f, matrix4f.cofactor3x3());
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m33(), 0.0f);
        assertEquals(0.0f, matrix4f.m30(), 0.0f);
        assertEquals(0.0f, matrix4f.m31(), 0.0f);
        assertEquals(0.0f, matrix4f.m32(), 0.0f);
        assertEquals(0.0f, matrix4f.m23(), 0.0f);
    }

    @Test
    public void testGetScale2() {
        Transform3D transform3D = new Transform3D();
        transform3D.setGameObject(new GameObject("Name"));
        Vector3f actualScale = transform3D.getScale();
        assertEquals(TransformHex.HEX_SIZE, actualScale.z, 0.0f);
        assertEquals(TransformHex.HEX_SIZE, actualScale.y, 0.0f);
        assertEquals(TransformHex.HEX_SIZE, actualScale.x, 0.0f);
        Matrix4fc localMatrix = transform3D.getLocalMatrix();
        assertTrue(localMatrix instanceof Matrix4f);
        assertFalse(transform3D.mShouldUpdate);
        Matrix4f matrix4f = transform3D.mWorldMatrix;
        assertEquals(matrix4f, localMatrix);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m22(), 0.0f);
        assertEquals(0.0f, matrix4f.m21(), 0.0f);
        assertEquals(0.0f, matrix4f.m20(), 0.0f);
        assertEquals(0.0f, matrix4f.m13(), 0.0f);
        assertEquals(0.0f, matrix4f.m12(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m11(), 0.0f);
        assertEquals(0.0f, matrix4f.m10(), 0.0f);
        assertEquals(0.0f, matrix4f.m03(), 0.0f);
        assertEquals(0.0f, matrix4f.m02(), 0.0f);
        assertEquals(0.0f, matrix4f.m01(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m00(), 0.0f);
        assertSame(matrix4f, matrix4f.cofactor3x3());
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m33(), 0.0f);
        assertEquals(0.0f, matrix4f.m30(), 0.0f);
        assertEquals(0.0f, matrix4f.m31(), 0.0f);
        assertEquals(0.0f, matrix4f.m32(), 0.0f);
        assertEquals(0.0f, matrix4f.m23(), 0.0f);
    }

    @Test
    public void testGetScale3() {
        Transform3D transform3D = new Transform3D();
        Vector3f vector3f = new Vector3f(10.0f);
        transform3D.getScale(vector3f);
        assertEquals(TransformHex.HEX_SIZE, vector3f.z, 0.0f);
        assertEquals(TransformHex.HEX_SIZE, vector3f.y, 0.0f);
        assertEquals(TransformHex.HEX_SIZE, vector3f.x, 0.0f);
        Matrix4fc localMatrix = transform3D.getLocalMatrix();
        assertTrue(localMatrix instanceof Matrix4f);
        assertFalse(transform3D.mShouldUpdate);
        Matrix4f matrix4f = transform3D.mWorldMatrix;
        assertEquals(matrix4f, localMatrix);
        assertEquals(0.0f, matrix4f.m30(), 0.0f);
        assertEquals(0.0f, matrix4f.m23(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m22(), 0.0f);
        assertEquals(0.0f, matrix4f.m21(), 0.0f);
        assertEquals(0.0f, matrix4f.m20(), 0.0f);
        assertEquals(0.0f, matrix4f.m13(), 0.0f);
        assertEquals(0.0f, matrix4f.m12(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m11(), 0.0f);
        assertEquals(0.0f, matrix4f.m10(), 0.0f);
        assertEquals(0.0f, matrix4f.m03(), 0.0f);
        assertEquals(0.0f, matrix4f.m02(), 0.0f);
        assertEquals(0.0f, matrix4f.m01(), 0.0f);
        assertEquals(TransformHex.HEX_SIZE, matrix4f.m00(), 0.0f);
        assertTrue(matrix4f.isAffine());
        assertSame(matrix4f, matrix4f.cofactor3x3());
        assertEquals(0.0f, matrix4f.m32(), 0.0f);
        assertEquals(0.0f, matrix4f.m31(), 0.0f);
    }

    @Test
    public void testSetLocal3DTransformation() {
        Transform3D transform3D = new Transform3D();
        Vector3f position = new Vector3f(10.0f);
        Quaternionf rotation = new Quaternionf(2.0, 3.0, 10.0, 10.0);
        transform3D.setLocal3DTransformation(position, rotation, new Vector3f(10.0f));
        assertEquals(10.0f, ((Quaternionf) transform3D.getLocalRotation()).z, 0.0f);
        assertEquals(3.0f, ((Quaternionf) transform3D.getLocalRotation()).y, 0.0f);
        assertEquals(
                TransformHex.HEX_HEIGHT, ((Quaternionf) transform3D.getLocalRotation()).x, 0.0f);
        assertEquals(10.0f, ((Quaternionf) transform3D.getLocalRotation()).w, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalPosition()).x, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalScale()).x, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalScale()).y, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalPosition()).y, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalPosition()).z, 0.0f);
        assertEquals(10.0f, ((Vector3f) transform3D.getLocalScale()).z, 0.0f);
    }
}
