/* (C) 2021 DragonSkulle */
package org.dragonskulle.components;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertSame;

import org.joml.Quaternionf;
import org.joml.Vector2f;
import org.joml.Vector3f;
import org.junit.Test;

// The below tests were generated by https://www.diffblue.com/

public class DiffBlueTransformHexTest {
    @Test
    public void testTranslate() {
        TransformHex transformHex = new TransformHex();
        transformHex.translate(10.0f);
        assertEquals(10.0f, transformHex.getHeight(), 0.0f);
    }

    @Test
    public void testSetHeight() {
        TransformHex transformHex = new TransformHex();
        transformHex.setHeight(10.0f);
        assertEquals(10.0f, transformHex.getHeight(), 0.0f);
    }

    @Test
    public void testGetLocalPosition() {
        TransformHex transformHex = new TransformHex();
        Vector3f vector3f = new Vector3f(10.0f);
        Vector3f actualLocalPosition = transformHex.getLocalPosition(vector3f);
        assertSame(vector3f, actualLocalPosition);
        assertEquals(-0.0f, actualLocalPosition.z, 0.0f);
        assertEquals(0.0f, actualLocalPosition.y, 0.0f);
        assertEquals(0.0f, actualLocalPosition.x, 0.0f);
    }

    @Test
    public void testGetRoundedLocalPosition() {
        TransformHex transformHex = new TransformHex();
        Vector3f vector3f = new Vector3f(10.0f);
        Vector3f actualRoundedLocalPosition = transformHex.getRoundedLocalPosition(vector3f);
        assertSame(vector3f, actualRoundedLocalPosition);
        assertEquals(-0.0f, actualRoundedLocalPosition.z, 0.0f);
        assertEquals(0.0f, actualRoundedLocalPosition.y, 0.0f);
        assertEquals(0.0f, actualRoundedLocalPosition.x, 0.0f);
    }

    @Test
    public void testSetLocal3DTransformation() {
        TransformHex transformHex = new TransformHex();
        Vector3f position = new Vector3f(10.0f);
        Quaternionf rotation = new Quaternionf(2.0, 3.0, 10.0, 10.0);
        transformHex.setLocal3DTransformation(position, rotation, new Vector3f(10.0f));
        assertEquals(10.0f, transformHex.getHeight(), 0.0f);
    }

    /** Test whether a child GameObject's parent always has the child. */
    @Test
    public void testAxialToCartesian() {
        Vector2f axial = new Vector2f(10.0f);
        Vector3f actualAxialToCartesianResult =
                TransformHex.axialToCartesian(axial, 10.0f, new Vector3f(10.0f));
        assertEquals(10.0f, actualAxialToCartesianResult.z, 0.0f);
        assertEquals(15.0f, actualAxialToCartesianResult.y, 0.0f);
        assertEquals(25.98076f, actualAxialToCartesianResult.x, 0.0f);
    }

    @Test
    public void testRoundAxial() {
        Vector2f axialPoint = new Vector2f(10.0f);
        Vector3f vector3f = new Vector3f(10.0f);
        Vector2f actualRoundAxialResult = TransformHex.roundAxial(axialPoint, vector3f);
        assertEquals(10.0f, actualRoundAxialResult.y, 0.0f);
        assertEquals(10.0f, actualRoundAxialResult.x, 0.0f);
        assertEquals(-20.0f, vector3f.z, 0.0f);
        assertEquals(10.0f, vector3f.y, 0.0f);
        assertEquals(10.0f, vector3f.x, 0.0f);
    }

    @Test
    public void testRoundAxial2() {
        Vector2f axialPoint = new Vector2f(0.5f);
        Vector3f vector3f = new Vector3f(10.0f);
        Vector2f actualRoundAxialResult = TransformHex.roundAxial(axialPoint, vector3f);
        assertEquals(0.0f, actualRoundAxialResult.y, 0.0f);
        assertEquals(TransformHex.HEX_SIZE, actualRoundAxialResult.x, 0.0f);
        assertEquals(-1.0f, vector3f.z, 0.0f);
        assertEquals(0.0f, vector3f.y, 0.0f);
        assertEquals(TransformHex.HEX_SIZE, vector3f.x, 0.0f);
    }

    @Test
    public void testRoundAxial3() {
        Vector2f vector2f = new Vector2f(10.0f);
        vector2f.add(0.5f, 0.0f);
        Vector3f vector3f = new Vector3f(10.0f);
        Vector2f actualRoundAxialResult = TransformHex.roundAxial(vector2f, vector3f);
        assertEquals(10.0f, actualRoundAxialResult.y, 0.0f);
        assertEquals(11.0f, actualRoundAxialResult.x, 0.0f);
        assertEquals(-21.0f, vector3f.z, 0.0f);
        assertEquals(10.0f, vector3f.y, 0.0f);
        assertEquals(11.0f, vector3f.x, 0.0f);
    }

    @Test
    public void testRoundCube() {
        Vector3f actualRoundCubeResult = TransformHex.roundCube(new Vector3f(10.0f));
        assertEquals(-20.0f, actualRoundCubeResult.z, 0.0f);
        assertEquals(10.0f, actualRoundCubeResult.y, 0.0f);
        assertEquals(10.0f, actualRoundCubeResult.x, 0.0f);
    }

    @Test
    public void testRoundCube2() {
        Vector3f vector3f = new Vector3f(10.0f);
        vector3f.add(0.5f, 0.0f, 0.0f);
        Vector3f actualRoundCubeResult = TransformHex.roundCube(vector3f);
        assertEquals(10.0f, actualRoundCubeResult.z, 0.0f);
        assertEquals(10.0f, actualRoundCubeResult.y, 0.0f);
        assertEquals(-20.0f, actualRoundCubeResult.x, 0.0f);
    }

    @Test
    public void testRoundCube3() {
        Vector3f vector3f = new Vector3f(10.0f);
        vector3f.add(0.0f, 0.5f, 0.0f);
        Vector3f actualRoundCubeResult = TransformHex.roundCube(vector3f);
        assertEquals(10.0f, actualRoundCubeResult.z, 0.0f);
        assertEquals(-20.0f, actualRoundCubeResult.y, 0.0f);
        assertEquals(10.0f, actualRoundCubeResult.x, 0.0f);
    }

    @Test
    public void testRoundCube4() {
        Vector3f vector3f = new Vector3f(10.0f);
        vector3f.add(0.0f, 0.0f, 0.5f);
        vector3f.add(0.5f, 0.0f, 0.0f);
        Vector3f actualRoundCubeResult = TransformHex.roundCube(vector3f);
        assertEquals(-21.0f, actualRoundCubeResult.z, 0.0f);
        assertEquals(10.0f, actualRoundCubeResult.y, 0.0f);
        assertEquals(11.0f, actualRoundCubeResult.x, 0.0f);
    }

    @Test
    public void testAxialToCube() {
        Vector3f actualAxialToCubeResult =
                TransformHex.axialToCube(10.0f, 10.0f, new Vector3f(10.0f));
        assertEquals(-20.0f, actualAxialToCubeResult.z, 0.0f);
        assertEquals(10.0f, actualAxialToCubeResult.y, 0.0f);
        assertEquals(10.0f, actualAxialToCubeResult.x, 0.0f);
    }

    @Test
    public void testAxialToCube2() {
        Vector2f axialPoint = new Vector2f(10.0f);
        Vector3f actualAxialToCubeResult =
                TransformHex.axialToCube(axialPoint, new Vector3f(10.0f));
        assertEquals(-20.0f, actualAxialToCubeResult.z, 0.0f);
        assertEquals(10.0f, actualAxialToCubeResult.y, 0.0f);
        assertEquals(10.0f, actualAxialToCubeResult.x, 0.0f);
    }

    @Test
    public void testCartesianToAxial() {
        Vector3f cartesian = new Vector3f(10.0f);
        Vector2f actualCartesianToAxialResult =
                TransformHex.cartesianToAxial(cartesian, new Vector2f(10.0f));
        assertEquals(6.666667f, actualCartesianToAxialResult.y, 0.0f);
        assertEquals(2.4401689f, actualCartesianToAxialResult.x, 0.0f);
    }

    /** Test whether a child GameObject's parent always has the child. */
    @Test
    public void testAxialTranslation() {
        TransformHex transform = new TransformHex();
        transform.translate(2f, 3f);

        Vector3f pos = transform.getLocalPosition(new Vector3f());

        assert (pos.x == 2f);
        assert (pos.y == 3f);
    }

    /** Test whether a child GameObject's parent always has the child. */
    @Test
    public void testHexTranslation() {
        TransformHex transform = new TransformHex();
        transform.translate(1f, 1f);

        Vector3f pos = transform.getLocalPosition(new Vector3f());

        assertEquals(1f, pos.x, 0.01f);
        assertEquals(1f, pos.y, 0.01f);

        transform.translate(1f, 0f, 0f);

        transform.getLocalPosition(pos);
        assertEquals(2f, pos.x, 0.01f);
        assertEquals(1f, pos.y, 0.01f);

        transform.translate(0f, 1f, 0f);

        transform.getLocalPosition(pos);
        assertEquals(3f, pos.x, 0.01f);
        assertEquals(0f, pos.y, 0.01f);

        transform.translate(0f, 0f, 1f);

        transform.getLocalPosition(pos);
        assertEquals(3f, pos.x, 0.01f);
        assertEquals(-1f, pos.y, 0.01f);
    }
}
