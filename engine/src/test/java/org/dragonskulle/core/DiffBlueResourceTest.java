/* (C) 2021 DragonSkulle */
package org.dragonskulle.core;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

// The below tests were generated by https://www.diffblue.com/

public class DiffBlueResourceTest {
    @Test
    public void testGet() {
        ResourceManager.CountedResource<Object> countedResource =
                new ResourceManager.CountedResource<Object>(
                        new ResourceArguments<Object, Object>(
                                Object.class, "Name", "Additional Args"),
                        "Resource");
        assertSame(countedResource.mResource, (new Resource<Object>(countedResource)).get());
        assertEquals("Resource", (new Resource<Object>(countedResource)).get());
    }

    @Test
    public void testGet2() {
        assertNull((new Resource<Object>(null)).get());
    }

    @Test
    public void testReload() {
        assertFalse(
                (new Resource<Object>(
                                new ResourceManager.CountedResource<Object>(
                                        new ResourceArguments<Object, Object>(
                                                Object.class, "Name", "Additional Args"),
                                        "Resource")))
                        .reload());
        assertFalse(
                (new Resource<Object>(
                                new ResourceManager.CountedResource<Object>(
                                        new ResourceArguments<Object, Object>(
                                                Object.class, "Name", "Additional Args"),
                                        0)))
                        .reload());
    }

    @Test
    public void testFree() {
        Resource<Object> resource = new Resource<Object>(null);
        resource.free();
        assertNull(resource.get());
    }

    @Test
    public void testClone() {
        Resource<Object> resource =
                new Resource<Object>(
                        new ResourceManager.CountedResource<Object>(
                                new ResourceArguments<Object, Object>(
                                        Object.class, "Name", "Additional Args"),
                                "Resource"));
        assertEquals(resource, resource.clone());
    }

    @Test
    public void testClone2() {
        assertNull((new Resource<Object>(null)).clone());
    }

    @Test
    public void testCast() {
        Resource<Object> resource =
                new Resource<Object>(
                        new ResourceManager.CountedResource<Object>(
                                new ResourceArguments<Object, Object>(
                                        Object.class, "Name", "Additional Args"),
                                "Resource"));
        assertSame(resource, resource.<Object>cast(Object.class));
    }

    @Test
    public void testCast2() {
        Resource<Object> resource =
                new Resource<Object>(
                        new ResourceManager.CountedResource<Object>(
                                new ResourceArguments<Object, Object>(
                                        Object.class, "Name", "Additional Args"),
                                null));
        assertNull(resource.<Object>cast(Object.class));
    }

    @Test
    public void testCast3() {
        Resource<Object> resource = new Resource<Object>(null);
        assertNull(resource.<Object>cast(Object.class));
    }

    @Test
    public void testHashCode() {
        assertEquals(
                -276420562,
                (new Resource<Object>(
                                new ResourceManager.CountedResource<Object>(
                                        new ResourceArguments<Object, Object>(
                                                Object.class, "Name", "Additional Args"),
                                        "Resource")))
                        .hashCode());
        assertEquals(
                1,
                (new Resource<Object>(
                                new ResourceManager.CountedResource<Object>(
                                        new ResourceArguments<Object, Object>(
                                                Object.class, "Name", "Additional Args"),
                                        1)))
                        .hashCode());
    }

    @Test
    public void testEquals() {
        assertFalse(
                (new Resource<Object>(
                                new ResourceManager.CountedResource<Object>(
                                        new ResourceArguments<Object, Object>(
                                                Object.class, "Name", "Additional Args"),
                                        "Resource")))
                        .equals("42"));
        assertFalse(
                (new Resource<Object>(
                                new ResourceManager.CountedResource<Object>(
                                        new ResourceArguments<Object, Object>(
                                                Object.class, "Name", "Additional Args"),
                                        null)))
                        .equals(null));
    }

    @Test
    public void testEquals2() {
        Resource<Object> resource =
                new Resource<Object>(
                        new ResourceManager.CountedResource<Object>(
                                new ResourceArguments<Object, Object>(
                                        Object.class, "Name", "Additional Args"),
                                "Resource"));
        assertTrue(
                resource.equals(
                        new Resource<Object>(
                                new ResourceManager.CountedResource<Object>(
                                        new ResourceArguments<Object, Object>(
                                                Object.class, "Name", "Additional Args"),
                                        "Resource"))));
    }

    @Test
    public void testEquals3() {
        Resource<Object> resource =
                new Resource<Object>(
                        new ResourceManager.CountedResource<Object>(
                                new ResourceArguments<Object, Object>(
                                        Object.class, "Name", "Additional Args"),
                                0));
        assertFalse(
                resource.equals(
                        new Resource<Object>(
                                new ResourceManager.CountedResource<Object>(
                                        new ResourceArguments<Object, Object>(
                                                Object.class, "Name", "Additional Args"),
                                        "Resource"))));
    }

    @Test
    public void testEquals4() {
        ResourceArguments<Object, Object> args =
                new ResourceArguments<Object, Object>(Object.class, "Name", "Additional Args");
        Resource<Object> resource =
                new Resource<Object>(
                        new ResourceManager.CountedResource<Object>(
                                args,
                                new Resource<Object>(
                                        new ResourceManager.CountedResource<Object>(
                                                new ResourceArguments<Object, Object>(
                                                        Object.class, "Name", "Additional Args"),
                                                "Resource"))));
        assertFalse(
                resource.equals(
                        new Resource<Object>(
                                new ResourceManager.CountedResource<Object>(
                                        new ResourceArguments<Object, Object>(
                                                Object.class, "Name", "Additional Args"),
                                        "Resource"))));
    }
}
