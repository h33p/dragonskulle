/* (C) 2021 DragonSkulle */
package org.dragonskulle.network.components;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.util.ArrayList;
import org.dragonskulle.audio.components.AudioListener;
import org.dragonskulle.core.GameObject;
import org.dragonskulle.core.TemplateManager;
import org.dragonskulle.network.TestNetworkComponent;
import org.dragonskulle.network.components.requests.ServerEvent;
import org.junit.Test;

// The below tests were generated by https://www.diffblue.com/

public class DiffBlueNetworkObjectTest {
    @Test
    public void testConstructor() {
        NetworkObject actualNetworkObject =
                new NetworkObject(1, 123, true, new NetworkManager(new TemplateManager(), null));
        assertTrue(actualNetworkObject.getClientRequests().isEmpty());
        assertFalse(actualNetworkObject.isStarted());
        assertTrue(actualNetworkObject.isServer());
        assertFalse(actualNetworkObject.isMine());
        assertTrue(actualNetworkObject.isEnabled());
        assertFalse(actualNetworkObject.isAwake());
        assertTrue(actualNetworkObject.getServerEvents().isEmpty());
        assertEquals(123, actualNetworkObject.getOwnerId());
        assertTrue(actualNetworkObject.getNetworkableComponents().isEmpty());
        assertEquals(1, actualNetworkObject.getNetworkObjectId());
        assertSame(actualNetworkObject, actualNetworkObject.getReference().get());
    }

    @Test
    public void testIsMine() {
        assertFalse(
                (new NetworkObject(1, 123, true, new NetworkManager(new TemplateManager(), null)))
                        .isMine());
        assertTrue(
                (new NetworkObject(1, -1, true, new NetworkManager(new TemplateManager(), null)))
                        .isMine());
        assertFalse(
                (new NetworkObject(1, -1, false, new NetworkManager(new TemplateManager(), null)))
                        .isMine());
    }

    @Test
    public void testIsMine2() {
        NetworkManager networkManager = new NetworkManager(new TemplateManager(), null);
        networkManager.createClient("127.0.0.1", 8080, null, null, null);
        assertFalse((new NetworkObject(1, 123, true, networkManager)).isMine());
    }

    @Test
    public void testIsMine3() {
        NetworkManager networkManager = new NetworkManager(new TemplateManager(), null);
        networkManager.createClient("127.0.0.1", 8080, null, null, null);
        assertTrue((new NetworkObject(1, -1, false, networkManager)).isMine());
    }

    @Test
    public void testSetOwnerId() {
        NetworkObject networkObject =
                new NetworkObject(1, 1, true, new NetworkManager(new TemplateManager(), null));
        networkObject.setOwnerId(1);
        assertFalse(networkObject.isStarted());
        assertTrue(networkObject.isEnabled());
        assertFalse(networkObject.isAwake());
        assertEquals(1, networkObject.getOwnerId());
    }

    @Test
    public void testSetOwnerId2() {
        NetworkObject networkObject =
                new NetworkObject(1, 1, false, new NetworkManager(new TemplateManager(), null));
        networkObject.setOwnerId(1);
        assertFalse(networkObject.isStarted());
        assertTrue(networkObject.isEnabled());
        assertFalse(networkObject.isAwake());
        assertEquals(1, networkObject.getOwnerId());
    }

    @Test
    public void testOnDestroy() {
        NetworkObject networkObject =
                new NetworkObject(1, 123, false, new NetworkManager(new TemplateManager(), null));
        networkObject.onDestroy();
        assertFalse(networkObject.isStarted());
        assertTrue(networkObject.isEnabled());
        assertFalse(networkObject.isAwake());
        assertEquals(123, networkObject.getOwnerId());
    }

    @Test
    public void testNetworkInitialize() {
        NetworkObject networkObject =
                new NetworkObject(1, 123, true, new NetworkManager(new TemplateManager(), null));
        networkObject.setGameObject(new GameObject("Name"));
        networkObject.networkInitialize();
        ArrayList<ServerEvent<?>> serverEvents = networkObject.getServerEvents();
        assertEquals(2, serverEvents.size());
        assertSame(networkObject, serverEvents.get(1).getNetworkObject());
        assertSame(networkObject, serverEvents.get(0).getNetworkObject());
    }

    @Test
    public void testNetworkInitialize2() {
        GameObject gameObject = new GameObject("Name");
        gameObject.addComponent(new AudioListener());

        NetworkObject networkObject =
                new NetworkObject(1, 123, true, new NetworkManager(new TemplateManager(), null));
        networkObject.setGameObject(gameObject);
        networkObject.networkInitialize();
        ArrayList<ServerEvent<?>> serverEvents = networkObject.getServerEvents();
        assertEquals(2, serverEvents.size());
        assertSame(networkObject, serverEvents.get(1).getNetworkObject());
        assertSame(networkObject, serverEvents.get(0).getNetworkObject());
    }

    @Test
    public void testNetworkInitialize3() {
        GameObject gameObject = new GameObject("Name");
        gameObject.addComponent(new NetworkHexTransform());

        NetworkObject networkObject =
                new NetworkObject(1, 123, true, new NetworkManager(new TemplateManager(), null));
        networkObject.setGameObject(gameObject);
        networkObject.networkInitialize();
        ArrayList<ServerEvent<?>> serverEvents = networkObject.getServerEvents();
        assertEquals(2, serverEvents.size());
        assertSame(networkObject, serverEvents.get(1).getNetworkObject());
        assertSame(networkObject, serverEvents.get(0).getNetworkObject());
    }

    @Test
    public void testNetworkInitialize4() {
        GameObject gameObject = new GameObject("Name");
        gameObject.addComponent(new TestNetworkComponent());

        NetworkObject networkObject =
                new NetworkObject(1, 123, true, new NetworkManager(new TemplateManager(), null));
        networkObject.setGameObject(gameObject);
        networkObject.networkInitialize();
        assertEquals(1, networkObject.getClientRequests().size());
        ArrayList<ServerEvent<?>> serverEvents = networkObject.getServerEvents();
        assertEquals(2, serverEvents.size());
        assertSame(networkObject, serverEvents.get(0).getNetworkObject());
    }

    @Test
    public void testBeforeNetSerialize() {
        NetworkObject networkObject =
                new NetworkObject(1, 123, true, new NetworkManager(new TemplateManager(), null));
        networkObject.beforeNetSerialize();
        assertFalse(networkObject.isStarted());
        assertTrue(networkObject.isEnabled());
        assertFalse(networkObject.isAwake());
        assertEquals(123, networkObject.getOwnerId());
    }

    @Test
    public void testEquals() {
        assertFalse(
                (new NetworkObject(1, 123, true, new NetworkManager(new TemplateManager(), null)))
                        .equals("42"));
        assertFalse(
                (new NetworkObject(1, 123, true, new NetworkManager(new TemplateManager(), null)))
                        .equals(null));
    }

    @Test
    public void testHashCode() {
        assertEquals(
                Integer.SIZE,
                (new NetworkObject(1, 123, true, new NetworkManager(new TemplateManager(), null)))
                        .hashCode());
    }

    @Test
    public void testHandleClientRequest() throws IOException {
        NetworkObject networkObject =
                new NetworkObject(1, 123, true, new NetworkManager(new TemplateManager(), null));
        assertFalse(
                networkObject.handleClientRequest(
                        1,
                        new DataInputStream(
                                new ByteArrayInputStream(
                                        "AAAAAAAAAAAAAAAAAAAAAAAA".getBytes("UTF-8")))));
    }

    @Test
    public void testHandleClientRequest2() throws IOException {
        NetworkObject networkObject =
                new NetworkObject(1, 123, true, new NetworkManager(new TemplateManager(), null));
        assertFalse(
                networkObject.handleClientRequest(
                        -1,
                        new DataInputStream(
                                new ByteArrayInputStream(
                                        "AAAAAAAAAAAAAAAAAAAAAAAA".getBytes("UTF-8")))));
    }

    @Test
    public void testHandleServerEvent() throws IOException {
        NetworkObject networkObject =
                new NetworkObject(1, 123, true, new NetworkManager(new TemplateManager(), null));
        assertFalse(
                networkObject.handleServerEvent(
                        1,
                        new DataInputStream(
                                new ByteArrayInputStream(
                                        "AAAAAAAAAAAAAAAAAAAAAAAA".getBytes("UTF-8")))));
    }

    @Test
    public void testHandleServerEvent2() throws IOException {
        NetworkObject networkObject =
                new NetworkObject(1, 123, true, new NetworkManager(new TemplateManager(), null));
        assertFalse(
                networkObject.handleServerEvent(
                        -1,
                        new DataInputStream(
                                new ByteArrayInputStream(
                                        "AAAAAAAAAAAAAAAAAAAAAAAA".getBytes("UTF-8")))));
    }

    @Test
    public void testResetUpdateMask() {
        NetworkObject networkObject =
                new NetworkObject(1, 123, true, new NetworkManager(new TemplateManager(), null));
        networkObject.resetUpdateMask();
        assertFalse(networkObject.isStarted());
        assertTrue(networkObject.isEnabled());
        assertFalse(networkObject.isAwake());
        assertEquals(123, networkObject.getOwnerId());
    }
}
