/* (C) 2021 DragonSkulle */
package org.dragonskulle.network;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import org.junit.Test;

// The below tests were generated by https://www.diffblue.com/

public class DiffBlueNetworkMessageTest {

    @Test
    public void testMaskConversionWorks() {
        for (short i = 0; i > 0; i++) {
            byte[] bytes = {(byte) (i & 0xff), (byte) ((i >> 8) & 0xff)};
            boolean[] flag = NetworkMessage.getMaskFromBytes(bytes);

            byte[] out1 = NetworkMessage.convertBoolArrayToBytes(flag);

            ArrayList<Boolean> flagList = new ArrayList<>();
            for (boolean val : flag) {
                flagList.add(val);
            }
            byte[] out2 = NetworkMessage.convertCollectionMaskToBytes(flagList);

            assertEquals(out1, out2);

            assertEquals(bytes, out1);
        }
    }

    @Test
    public void testGetMaskFromBytes() throws UnsupportedEncodingException {
        boolean[] actualMaskFromBytes = NetworkMessage.getMaskFromBytes("A".getBytes("UTF-8"));
        assertEquals(8, actualMaskFromBytes.length);
        assertTrue(actualMaskFromBytes[0]);
        assertTrue(!actualMaskFromBytes[1]);
        assertTrue(!actualMaskFromBytes[2]);
        assertTrue(!actualMaskFromBytes[3]);
        assertTrue(!actualMaskFromBytes[4]);
        assertTrue(!actualMaskFromBytes[5]);
        assertTrue(actualMaskFromBytes[6]);
        assertTrue(!actualMaskFromBytes[7]);
    }

    @Test
    public void testGetMaskFromBytes2() {
        boolean[] actualMaskFromBytes = NetworkMessage.getMaskFromBytes(new byte[] {0, 'A'});
        assertEquals(16, actualMaskFromBytes.length);
        for (int i = 0; i < 8; i++) {
            assertFalse(actualMaskFromBytes[i]);
        }
        assertTrue(actualMaskFromBytes[8]);
        assertTrue(!actualMaskFromBytes[9]);
        assertTrue(!actualMaskFromBytes[10]);
        assertTrue(!actualMaskFromBytes[11]);
        assertTrue(!actualMaskFromBytes[12]);
        assertTrue(!actualMaskFromBytes[13]);
        assertTrue(actualMaskFromBytes[14]);
        assertTrue(!actualMaskFromBytes[15]);
    }

    @Test
    public void testConvertBoolArrayToBytes() {
        byte[] actualConvertBoolArrayToBytesResult =
                NetworkMessage.convertBoolArrayToBytes(new boolean[] {true, true, true, true});
        assertEquals(1, actualConvertBoolArrayToBytesResult.length);
        assertEquals((byte) 15, actualConvertBoolArrayToBytesResult[0]);
    }

    @Test
    public void testConvertBoolArrayToBytes2() {
        byte[] actualConvertBoolArrayToBytesResult =
                NetworkMessage.convertBoolArrayToBytes(new boolean[] {false, true, true, true});
        assertEquals(1, actualConvertBoolArrayToBytesResult.length);
        assertEquals((byte) 14, actualConvertBoolArrayToBytesResult[0]);
    }
}
