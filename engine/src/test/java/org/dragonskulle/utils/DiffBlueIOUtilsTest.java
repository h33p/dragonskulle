/* (C) 2021 DragonSkulle */
package org.dragonskulle.utils;

import static org.junit.Assert.assertEquals;

import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

// The below tests were generated by https://www.diffblue.com/

public class DiffBlueIOUtilsTest {
    @Rule public ExpectedException thrown = ExpectedException.none();

    @Test
    public void testReadNBytes() throws IOException {
        byte[] actualReadNBytesResult =
                IOUtils.readNBytes(
                        new ByteArrayInputStream("AAAAAAAAAAAAAAAAAAAAAAAA".getBytes("UTF-8")), 3);
        assertEquals(3, actualReadNBytesResult.length);
        assertEquals('A', actualReadNBytesResult[0]);
        assertEquals('A', actualReadNBytesResult[1]);
        assertEquals('A', actualReadNBytesResult[2]);
    }

    @Test
    public void testReadNBytes2() throws IOException {
        assertEquals(0, IOUtils.readNBytes(new ByteArrayInputStream(new byte[] {}), 3).length);
    }

    @Test
    public void testReadNBytes3() throws IOException {
        assertEquals(
                0,
                IOUtils.readNBytes(
                                new ByteArrayInputStream(
                                        "AAAAAAAAAAAAAAAAAAAAAAAA".getBytes("UTF-8")),
                                0)
                        .length);
    }

    @Test
    public void testReadNBytes4() throws IOException {
        assertEquals(
                24,
                IOUtils.readNBytes(
                                new ByteArrayInputStream(
                                        "AAAAAAAAAAAAAAAAAAAAAAAA".getBytes("UTF-8")),
                                8192)
                        .length);
    }

    @Test
    public void testReadNBytes5() throws IOException {
        thrown.expect(IllegalArgumentException.class);
        IOUtils.readNBytes(
                new ByteArrayInputStream("AAAAAAAAAAAAAAAAAAAAAAAA".getBytes("UTF-8")), -1);
    }

    @Test
    public void testReadExactlyNBytes() throws IOException {
        byte[] actualReadExactlyNBytesResult =
                IOUtils.readExactlyNBytes(
                        new ByteArrayInputStream("AAAAAAAAAAAAAAAAAAAAAAAA".getBytes("UTF-8")), 3);
        assertEquals(3, actualReadExactlyNBytesResult.length);
        assertEquals('A', actualReadExactlyNBytesResult[0]);
        assertEquals('A', actualReadExactlyNBytesResult[1]);
        assertEquals('A', actualReadExactlyNBytesResult[2]);
    }

    @Test
    public void testReadExactlyNBytes2() throws IOException {
        thrown.expect(EOFException.class);
        IOUtils.readExactlyNBytes(new ByteArrayInputStream(new byte[] {}), 3);
    }

    @Test
    public void testReadExactlyNBytes3() throws IOException {
        assertEquals(
                0,
                IOUtils.readExactlyNBytes(
                                new ByteArrayInputStream(
                                        "AAAAAAAAAAAAAAAAAAAAAAAA".getBytes("UTF-8")),
                                0)
                        .length);
    }

    @Test
    public void testReadExactlyNBytes4() throws IOException {
        thrown.expect(EOFException.class);
        IOUtils.readExactlyNBytes(
                new ByteArrayInputStream("AAAAAAAAAAAAAAAAAAAAAAAA".getBytes("UTF-8")), 8192);
    }

    @Test
    public void testReadExactlyNBytes5() throws IOException {
        thrown.expect(IOException.class);
        IOUtils.readExactlyNBytes(
                new ByteArrayInputStream("AAAAAAAAAAAAAAAAAAAAAAAA".getBytes("UTF-8")), -1);
    }
}
