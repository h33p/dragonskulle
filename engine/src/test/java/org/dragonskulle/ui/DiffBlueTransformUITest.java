/* (C) 2021 DragonSkulle */
package org.dragonskulle.ui;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import org.joml.Vector2f;
import org.joml.Vector2fc;
import org.joml.Vector4f;
import org.joml.Vector4fc;
import org.junit.Test;

// The below tests were generated by https://www.diffblue.com/

public class DiffBlueTransformUITest {
    @Test
    public void testConstructor() {
        TransformUI actualTransformUI = new TransformUI();
        assertFalse(actualTransformUI.isStarted());
        assertFalse(actualTransformUI.isMaintainAspect());
        assertTrue(actualTransformUI.isEnabled());
        assertFalse(actualTransformUI.isClipChildren());
        assertFalse(actualTransformUI.isAwake());
        assertEquals(1.0f, actualTransformUI.getTargetAspectRatio(), 0.0f);
        Vector2fc pivotOffset = actualTransformUI.getPivotOffset();
        assertTrue(pivotOffset instanceof Vector2f);
        Vector4fc parentAnchor = actualTransformUI.getParentAnchor();
        assertTrue(parentAnchor instanceof Vector4f);
        assertEquals(0.5f, ((Vector2f) pivotOffset).y, 0.0f);
        assertEquals(1.0f, ((Vector4f) parentAnchor).z, 0.0f);
        assertEquals(0.0f, ((Vector4f) parentAnchor).y, 0.0f);
        assertEquals(0.0f, ((Vector4f) parentAnchor).x, 0.0f);
        assertEquals(1.0f, ((Vector4f) parentAnchor).w, 0.0f);
        assertEquals(0.5f, ((Vector2f) pivotOffset).x, 0.0f);
        assertSame(actualTransformUI, actualTransformUI.getReference().get());
    }

    @Test
    public void testConstructor2() {
        TransformUI actualTransformUI = new TransformUI(10.0f, 10.0f);
        assertFalse(actualTransformUI.isStarted());
        assertFalse(actualTransformUI.isMaintainAspect());
        assertTrue(actualTransformUI.isEnabled());
        assertFalse(actualTransformUI.isClipChildren());
        assertFalse(actualTransformUI.isAwake());
        assertEquals(1.0f, actualTransformUI.getTargetAspectRatio(), 0.0f);
        Vector2fc pivotOffset = actualTransformUI.getPivotOffset();
        assertTrue(pivotOffset instanceof Vector2f);
        Vector4fc parentAnchor = actualTransformUI.getParentAnchor();
        assertTrue(parentAnchor instanceof Vector4f);
        assertEquals(0.5f, ((Vector2f) pivotOffset).y, 0.0f);
        assertEquals(1.0f, ((Vector4f) parentAnchor).z, 0.0f);
        assertEquals(0.0f, ((Vector4f) parentAnchor).y, 0.0f);
        assertEquals(0.0f, ((Vector4f) parentAnchor).x, 0.0f);
        assertEquals(1.0f, ((Vector4f) parentAnchor).w, 0.0f);
        assertEquals(0.5f, ((Vector2f) pivotOffset).x, 0.0f);
        assertSame(actualTransformUI, actualTransformUI.getReference().get());
    }

    @Test
    public void testConstructor3() {
        TransformUI actualTransformUI = new TransformUI(10.0f, 10.0f, true);
        assertFalse(actualTransformUI.isStarted());
        assertTrue(actualTransformUI.isMaintainAspect());
        assertTrue(actualTransformUI.isEnabled());
        assertFalse(actualTransformUI.isClipChildren());
        assertFalse(actualTransformUI.isAwake());
        assertEquals(1.0f, actualTransformUI.getTargetAspectRatio(), 0.0f);
        Vector2fc pivotOffset = actualTransformUI.getPivotOffset();
        assertTrue(pivotOffset instanceof Vector2f);
        Vector4fc parentAnchor = actualTransformUI.getParentAnchor();
        assertTrue(parentAnchor instanceof Vector4f);
        assertEquals(0.5f, ((Vector2f) pivotOffset).y, 0.0f);
        assertEquals(1.0f, ((Vector4f) parentAnchor).z, 0.0f);
        assertEquals(0.0f, ((Vector4f) parentAnchor).y, 0.0f);
        assertEquals(0.0f, ((Vector4f) parentAnchor).x, 0.0f);
        assertEquals(1.0f, ((Vector4f) parentAnchor).w, 0.0f);
        assertEquals(0.5f, ((Vector2f) pivotOffset).x, 0.0f);
        assertSame(actualTransformUI, actualTransformUI.getReference().get());
    }

    @Test
    public void testConstructor4() {
        TransformUI actualTransformUI = new TransformUI(true);
        assertFalse(actualTransformUI.isStarted());
        assertTrue(actualTransformUI.isMaintainAspect());
        assertTrue(actualTransformUI.isEnabled());
        assertFalse(actualTransformUI.isClipChildren());
        assertFalse(actualTransformUI.isAwake());
        assertEquals(1.0f, actualTransformUI.getTargetAspectRatio(), 0.0f);
        Vector2fc pivotOffset = actualTransformUI.getPivotOffset();
        assertTrue(pivotOffset instanceof Vector2f);
        Vector4fc parentAnchor = actualTransformUI.getParentAnchor();
        assertTrue(parentAnchor instanceof Vector4f);
        assertEquals(0.5f, ((Vector2f) pivotOffset).y, 0.0f);
        assertEquals(1.0f, ((Vector4f) parentAnchor).z, 0.0f);
        assertEquals(0.0f, ((Vector4f) parentAnchor).y, 0.0f);
        assertEquals(0.0f, ((Vector4f) parentAnchor).x, 0.0f);
        assertEquals(1.0f, ((Vector4f) parentAnchor).w, 0.0f);
        assertEquals(0.5f, ((Vector2f) pivotOffset).x, 0.0f);
        assertSame(actualTransformUI, actualTransformUI.getReference().get());
    }

    @Test
    public void testOnDestroy() {
        TransformUI transformUI = new TransformUI();
        transformUI.onDestroy();
        assertFalse(transformUI.isStarted());
        assertFalse(transformUI.isMaintainAspect());
        assertTrue(transformUI.isEnabled());
        assertFalse(transformUI.isClipChildren());
        assertFalse(transformUI.isAwake());
        assertEquals(1.0f, transformUI.getTargetAspectRatio(), 0.0f);
    }

    @Test
    public void testSetTargetAspectRatio() {
        TransformUI transformUI = new TransformUI();
        transformUI.setTargetAspectRatio(10.0f);
        assertEquals(10.0f, transformUI.getTargetAspectRatio(), 0.0f);
    }

    @Test
    public void testSetPivotOffset() {
        TransformUI transformUI = new TransformUI();
        transformUI.setPivotOffset(10.0f, 10.0f);
        assertEquals(10.0f, ((Vector2f) transformUI.getPivotOffset()).y, 0.0f);
        assertEquals(10.0f, ((Vector2f) transformUI.getPivotOffset()).x, 0.0f);
    }

    @Test
    public void testSetParentAnchor() {
        TransformUI transformUI = new TransformUI();
        transformUI.setParentAnchor(10.0f);
        assertEquals(-9.0f, ((Vector4f) transformUI.getParentAnchor()).z, 0.0f);
        assertEquals(10.0f, ((Vector4f) transformUI.getParentAnchor()).y, 0.0f);
        assertEquals(10.0f, ((Vector4f) transformUI.getParentAnchor()).x, 0.0f);
        assertEquals(-9.0f, ((Vector4f) transformUI.getParentAnchor()).w, 0.0f);
    }

    @Test
    public void testSetParentAnchor2() {
        TransformUI transformUI = new TransformUI();
        transformUI.setParentAnchor(10.0f, 10.0f);
        assertEquals(-9.0f, ((Vector4f) transformUI.getParentAnchor()).z, 0.0f);
        assertEquals(10.0f, ((Vector4f) transformUI.getParentAnchor()).y, 0.0f);
        assertEquals(10.0f, ((Vector4f) transformUI.getParentAnchor()).x, 0.0f);
        assertEquals(-9.0f, ((Vector4f) transformUI.getParentAnchor()).w, 0.0f);
    }

    @Test
    public void testSetParentAnchor3() {
        TransformUI transformUI = new TransformUI();
        transformUI.setParentAnchor(10.0f, 10.0f, 10.0f, 10.0f);
        assertEquals(10.0f, ((Vector4f) transformUI.getParentAnchor()).z, 0.0f);
        assertEquals(10.0f, ((Vector4f) transformUI.getParentAnchor()).y, 0.0f);
        assertEquals(10.0f, ((Vector4f) transformUI.getParentAnchor()).x, 0.0f);
        assertEquals(10.0f, ((Vector4f) transformUI.getParentAnchor()).w, 0.0f);
    }
}
