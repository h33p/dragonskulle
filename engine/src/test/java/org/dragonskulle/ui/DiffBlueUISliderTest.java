/* (C) 2021 DragonSkulle */
package org.dragonskulle.ui;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

// The below tests were generated by https://www.diffblue.com/

public class DiffBlueUISliderTest {
    @Test
    public void testConstructor() {
        UISlider actualUiSlider = new UISlider();
        assertEquals(1.0f, actualUiSlider.getMaxValue(), 0.0f);
        assertTrue(actualUiSlider.isEnabled());
        assertFalse(actualUiSlider.isStarted());
        assertEquals(0.0f, actualUiSlider.getRoundStep(), 0.0f);
        assertEquals(0.0f, actualUiSlider.getMinValue(), 0.0f);
        assertEquals(0.0f, actualUiSlider.getValue(), 0.0f);
        assertFalse(actualUiSlider.isAwake());
        assertEquals(0.0f, actualUiSlider.mTmpCursorPos2.y, 0.0f);
        assertEquals(0.0f, actualUiSlider.mTmpCursorPos.z, 0.0f);
        assertSame(actualUiSlider, actualUiSlider.getReference().get());
    }

    @Test
    public void testConstructor10() {
        UISlider actualUiSlider = new UISlider((UISlider.ISliderValueEvent) null);
        assertEquals(1.0f, actualUiSlider.getMaxValue(), 0.0f);
        assertTrue(actualUiSlider.isEnabled());
        assertFalse(actualUiSlider.isStarted());
        assertEquals(0.0f, actualUiSlider.getRoundStep(), 0.0f);
        assertEquals(0.0f, actualUiSlider.getMinValue(), 0.0f);
        assertEquals(0.0f, actualUiSlider.getValue(), 0.0f);
        assertFalse(actualUiSlider.isAwake());
        assertEquals(0.0f, actualUiSlider.mTmpCursorPos2.y, 0.0f);
        assertEquals(0.0f, actualUiSlider.mTmpCursorPos.z, 0.0f);
        assertSame(actualUiSlider, actualUiSlider.getReference().get());
    }

    @Test
    public void testConstructor2() {
        UISlider actualUiSlider = new UISlider(10.0f);
        assertEquals(1.0f, actualUiSlider.getMaxValue(), 0.0f);
        assertTrue(actualUiSlider.isEnabled());
        assertFalse(actualUiSlider.isStarted());
        assertEquals(0.0f, actualUiSlider.getRoundStep(), 0.0f);
        assertEquals(0.0f, actualUiSlider.getMinValue(), 0.0f);
        assertEquals(10.0f, actualUiSlider.getValue(), 0.0f);
        assertFalse(actualUiSlider.isAwake());
        assertEquals(0.0f, actualUiSlider.mTmpCursorPos2.y, 0.0f);
        assertEquals(0.0f, actualUiSlider.mTmpCursorPos.z, 0.0f);
        assertSame(actualUiSlider, actualUiSlider.getReference().get());
    }

    @Test
    public void testConstructor3() {
        UISlider actualUiSlider = new UISlider(10.0f, 10.0f, 10.0f);
        assertEquals(10.0f, actualUiSlider.getMaxValue(), 0.0f);
        assertTrue(actualUiSlider.isEnabled());
        assertFalse(actualUiSlider.isStarted());
        assertEquals(0.0f, actualUiSlider.getRoundStep(), 0.0f);
        assertEquals(10.0f, actualUiSlider.getMinValue(), 0.0f);
        assertEquals(10.0f, actualUiSlider.getValue(), 0.0f);
        assertFalse(actualUiSlider.isAwake());
        assertEquals(0.0f, actualUiSlider.mTmpCursorPos2.y, 0.0f);
        assertEquals(0.0f, actualUiSlider.mTmpCursorPos.z, 0.0f);
        assertSame(actualUiSlider, actualUiSlider.getReference().get());
    }

    @Test
    public void testConstructor4() {
        UISlider actualUiSlider = new UISlider(10.0f, 10.0f, 10.0f, 10.0f);
        assertEquals(10.0f, actualUiSlider.getMaxValue(), 0.0f);
        assertTrue(actualUiSlider.isEnabled());
        assertFalse(actualUiSlider.isStarted());
        assertEquals(10.0f, actualUiSlider.getRoundStep(), 0.0f);
        assertEquals(10.0f, actualUiSlider.getMinValue(), 0.0f);
        assertEquals(10.0f, actualUiSlider.getValue(), 0.0f);
        assertFalse(actualUiSlider.isAwake());
        assertEquals(0.0f, actualUiSlider.mTmpCursorPos2.y, 0.0f);
        assertEquals(0.0f, actualUiSlider.mTmpCursorPos.z, 0.0f);
        assertSame(actualUiSlider, actualUiSlider.getReference().get());
    }

    @Test
    public void testConstructor5() {
        UISlider actualUiSlider = new UISlider(10.0f, 10.0f, 10.0f, 10.0f, null);
        assertEquals(10.0f, actualUiSlider.getMaxValue(), 0.0f);
        assertTrue(actualUiSlider.isEnabled());
        assertFalse(actualUiSlider.isStarted());
        assertEquals(10.0f, actualUiSlider.getRoundStep(), 0.0f);
        assertEquals(10.0f, actualUiSlider.getMinValue(), 0.0f);
        assertEquals(10.0f, actualUiSlider.getValue(), 0.0f);
        assertFalse(actualUiSlider.isAwake());
        assertEquals(0.0f, actualUiSlider.mTmpCursorPos2.y, 0.0f);
        assertEquals(0.0f, actualUiSlider.mTmpCursorPos.z, 0.0f);
        assertSame(actualUiSlider, actualUiSlider.getReference().get());
    }

    @Test
    public void testConstructor6() {
        UISlider actualUiSlider = new UISlider(10.0f, 10.0f, 10.0f, 10.0f, null, null);
        assertEquals(10.0f, actualUiSlider.getMaxValue(), 0.0f);
        assertTrue(actualUiSlider.isEnabled());
        assertFalse(actualUiSlider.isStarted());
        assertEquals(10.0f, actualUiSlider.getRoundStep(), 0.0f);
        assertEquals(10.0f, actualUiSlider.getMinValue(), 0.0f);
        assertEquals(10.0f, actualUiSlider.getValue(), 0.0f);
        assertFalse(actualUiSlider.isAwake());
        assertEquals(0.0f, actualUiSlider.mTmpCursorPos2.y, 0.0f);
        assertEquals(0.0f, actualUiSlider.mTmpCursorPos.z, 0.0f);
        assertSame(actualUiSlider, actualUiSlider.getReference().get());
    }

    @Test
    public void testConstructor7() {
        UISlider actualUiSlider =
                new UISlider(10.0f, 10.0f, 10.0f, (UISlider.ISliderValueEvent) null);
        assertEquals(10.0f, actualUiSlider.getMaxValue(), 0.0f);
        assertTrue(actualUiSlider.isEnabled());
        assertFalse(actualUiSlider.isStarted());
        assertEquals(0.0f, actualUiSlider.getRoundStep(), 0.0f);
        assertEquals(10.0f, actualUiSlider.getMinValue(), 0.0f);
        assertEquals(10.0f, actualUiSlider.getValue(), 0.0f);
        assertFalse(actualUiSlider.isAwake());
        assertEquals(0.0f, actualUiSlider.mTmpCursorPos2.y, 0.0f);
        assertEquals(0.0f, actualUiSlider.mTmpCursorPos.z, 0.0f);
        assertSame(actualUiSlider, actualUiSlider.getReference().get());
    }

    @Test
    public void testConstructor8() {
        UISlider actualUiSlider = new UISlider(10.0f, null);
        assertEquals(1.0f, actualUiSlider.getMaxValue(), 0.0f);
        assertTrue(actualUiSlider.isEnabled());
        assertFalse(actualUiSlider.isStarted());
        assertEquals(0.0f, actualUiSlider.getRoundStep(), 0.0f);
        assertEquals(0.0f, actualUiSlider.getMinValue(), 0.0f);
        assertEquals(10.0f, actualUiSlider.getValue(), 0.0f);
        assertFalse(actualUiSlider.isAwake());
        assertEquals(0.0f, actualUiSlider.mTmpCursorPos2.y, 0.0f);
        assertEquals(0.0f, actualUiSlider.mTmpCursorPos.z, 0.0f);
        assertSame(actualUiSlider, actualUiSlider.getReference().get());
    }

    @Test
    public void testConstructor9() {
        UISlider actualUiSlider = new UISlider(10.0f, (UISlider.ISliderValueEvent) null, null);
        assertEquals(1.0f, actualUiSlider.getMaxValue(), 0.0f);
        assertTrue(actualUiSlider.isEnabled());
        assertFalse(actualUiSlider.isStarted());
        assertEquals(0.0f, actualUiSlider.getRoundStep(), 0.0f);
        assertEquals(0.0f, actualUiSlider.getMinValue(), 0.0f);
        assertEquals(10.0f, actualUiSlider.getValue(), 0.0f);
        assertFalse(actualUiSlider.isAwake());
        assertEquals(0.0f, actualUiSlider.mTmpCursorPos2.y, 0.0f);
        assertEquals(0.0f, actualUiSlider.mTmpCursorPos.z, 0.0f);
        assertSame(actualUiSlider, actualUiSlider.getReference().get());
    }

    @Test
    public void testOnDestroy() {
        UISlider uiSlider = new UISlider();
        uiSlider.onDestroy();
        assertEquals(1.0f, uiSlider.getMaxValue(), 0.0f);
        assertTrue(uiSlider.isEnabled());
        assertFalse(uiSlider.isStarted());
        assertEquals(0.0f, uiSlider.getRoundStep(), 0.0f);
        assertEquals(0.0f, uiSlider.getMinValue(), 0.0f);
        assertEquals(0.0f, uiSlider.getValue(), 0.0f);
        assertFalse(uiSlider.isAwake());
        assertEquals(0.0f, uiSlider.mTmpCursorPos2.y, 0.0f);
        assertEquals(0.0f, uiSlider.mTmpCursorPos.z, 0.0f);
    }
}
