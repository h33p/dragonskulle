/* (C) 2021 DragonSkulle */
package org.dragonskulle.ui;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.dragonskulle.renderer.BindingDescription;
import org.dragonskulle.renderer.SampledTexture;
import org.joml.Vector2i;
import org.joml.Vector3f;
import org.joml.Vector4f;
import org.junit.Test;

// The below tests were generated by https://www.diffblue.com/

public class DiffBlueUIMaterialTest {
    @Test
    public void testConstructor() {
        UIMaterial actualUiMaterial = new UIMaterial();
        assertEquals(1.0f, actualUiMaterial.getAlpha(), 0.0f);
        assertEquals(1, actualUiMaterial.getFragmentTextures().length);
        Vector4f colour = actualUiMaterial.getColour();
        assertEquals(1.0f, colour.z(), 0.0f);
        assertEquals(1.0f, colour.y(), 0.0f);
        assertEquals(1.0f, colour.x(), 0.0f);
        assertEquals(1.0f, colour.w(), 0.0f);
    }

    @Test
    public void testConstructor2() {
        UIMaterial actualUiMaterial = new UIMaterial(new SampledTexture("Texture Name"));
        assertEquals(1.0f, actualUiMaterial.getAlpha(), 0.0f);
        assertEquals(1, actualUiMaterial.getFragmentTextures().length);
        Vector4f colour = actualUiMaterial.getColour();
        assertEquals(1.0f, colour.z(), 0.0f);
        assertEquals(1.0f, colour.y(), 0.0f);
        assertEquals(1.0f, colour.x(), 0.0f);
        assertEquals(1.0f, colour.w(), 0.0f);
    }

    @Test
    public void testConstructor3() {
        UIMaterial actualUiMaterial = new UIMaterial(new Vector3f(10.0f));
        assertEquals(1.0f, actualUiMaterial.getAlpha(), 0.0f);
        assertEquals(1, actualUiMaterial.getFragmentTextures().length);
        Vector4f colour = actualUiMaterial.getColour();
        assertEquals(10.0f, colour.z(), 0.0f);
        assertEquals(10.0f, colour.y(), 0.0f);
        assertEquals(10.0f, colour.x(), 0.0f);
        assertEquals(1.0f, colour.w(), 0.0f);
    }

    @Test
    public void testConstructor4() {
        Vector3f colour = new Vector3f(10.0f);
        UIMaterial actualUiMaterial = new UIMaterial(colour, new SampledTexture("Texture Name"));
        assertEquals(1.0f, actualUiMaterial.getAlpha(), 0.0f);
        assertEquals(1, actualUiMaterial.getFragmentTextures().length);
        Vector4f colour1 = actualUiMaterial.getColour();
        assertEquals(10.0f, colour1.z(), 0.0f);
        assertEquals(10.0f, colour1.y(), 0.0f);
        assertEquals(10.0f, colour1.x(), 0.0f);
        assertEquals(1.0f, colour1.w(), 0.0f);
    }

    @Test
    public void testConstructor5() {
        UIMaterial actualUiMaterial = new UIMaterial(new Vector4f(10.0f));
        assertEquals(10.0f, actualUiMaterial.getAlpha(), 0.0f);
        assertEquals(1, actualUiMaterial.getFragmentTextures().length);
        Vector4f colour = actualUiMaterial.getColour();
        assertEquals(10.0f, colour.z(), 0.0f);
        assertEquals(10.0f, colour.y(), 0.0f);
        assertEquals(10.0f, colour.x(), 0.0f);
        assertEquals(10.0f, colour.w(), 0.0f);
    }

    @Test
    public void testConstructor6() {
        Vector4f vector4f = new Vector4f(new Vector2i(1), 10.0f, 10.0f);
        vector4f.add(new Vector4f(10.0f));
        UIMaterial actualUiMaterial = new UIMaterial(vector4f);
        assertEquals(20.0f, actualUiMaterial.getAlpha(), 0.0f);
        assertEquals(1, actualUiMaterial.getFragmentTextures().length);
        Vector4f colour = actualUiMaterial.getColour();
        assertEquals(20.0f, colour.z(), 0.0f);
        assertEquals(11.0f, colour.y(), 0.0f);
        assertEquals(11.0f, colour.x(), 0.0f);
        assertEquals(20.0f, colour.w(), 0.0f);
    }

    @Test
    public void testConstructor7() {
        Vector4f colour = new Vector4f(10.0f);
        UIMaterial actualUiMaterial = new UIMaterial(colour, new SampledTexture("Texture Name"));
        assertEquals(10.0f, actualUiMaterial.getAlpha(), 0.0f);
        assertEquals(1, actualUiMaterial.getFragmentTextures().length);
        Vector4f colour1 = actualUiMaterial.getColour();
        assertEquals(10.0f, colour1.z(), 0.0f);
        assertEquals(10.0f, colour1.y(), 0.0f);
        assertEquals(10.0f, colour1.x(), 0.0f);
        assertEquals(10.0f, colour1.w(), 0.0f);
    }

    @Test
    public void testFree() {
        UIMaterial uiMaterial = new UIMaterial();
        uiMaterial.free();
        assertEquals(1.0f, uiMaterial.getAlpha(), 0.0f);
        assertEquals(1, uiMaterial.getFragmentTextures().length);
    }

    @Test
    public void testFree2() {
        UIMaterial uiMaterial = new UIMaterial((SampledTexture) null);
        uiMaterial.free();
        assertEquals(1.0f, uiMaterial.getAlpha(), 0.0f);
        assertEquals(1, uiMaterial.getFragmentTextures().length);
    }

    @Test
    public void testUIShaderSetConstructor() {
        UIMaterial.UIShaderSet actualUiShaderSet = new UIMaterial.UIShaderSet();
        assertEquals(0, actualUiShaderSet.getFragmentPushConstantSize());
        assertFalse(actualUiShaderSet.isVertexUniformDataDirty());
        assertTrue(actualUiShaderSet.isPreSort());
        assertFalse(actualUiShaderSet.isGeometryUniformDataDirty());
        assertFalse(actualUiShaderSet.isFragmentUniformDataDirty());
        assertFalse(actualUiShaderSet.isDepthTest());
        assertTrue(actualUiShaderSet.isAlphaBlend());
        assertEquals(0, actualUiShaderSet.getVertexUniformDataSize());
        assertEquals(5, actualUiShaderSet.getVertexAttributeDescriptions().length);
        assertEquals(10000, actualUiShaderSet.getRenderOrder());
        assertEquals(0, actualUiShaderSet.getGeometryUniformDataSize());
        assertEquals(1, actualUiShaderSet.getNumFragmentTextures());
        assertEquals(0, actualUiShaderSet.getLightCount());
        assertEquals(0, actualUiShaderSet.getFragmentUniformDataSize());
        BindingDescription vertexBindingDescription =
                actualUiShaderSet.getVertexBindingDescription();
        assertEquals(1, vertexBindingDescription.mInputRate);
        assertEquals(1, vertexBindingDescription.mBindingId);
        assertEquals(80, vertexBindingDescription.mSize);
    }
}
