/* (C) 2021 DragonSkulle */
package org.dragonskulle.ui;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

// The below tests were generated by https://www.diffblue.com/

public class DiffBlueUIDropDownTest {
    @Test
    public void testConstructor() {
        UIDropDown actualUiDropDown = new UIDropDown();
        assertFalse(actualUiDropDown.isStarted());
        assertTrue(actualUiDropDown.isEnabled());
        assertFalse(actualUiDropDown.isAwake());
        assertEquals(-1, actualUiDropDown.getSelected());
        assertSame(actualUiDropDown, actualUiDropDown.getReference().get());
    }

    @Test
    public void testConstructor3() {
        UIDropDown actualUiDropDown = new UIDropDown(1, "foo", "foo", "foo");
        assertFalse(actualUiDropDown.isStarted());
        assertTrue(actualUiDropDown.isEnabled());
        assertFalse(actualUiDropDown.isAwake());
        assertTrue(actualUiDropDown.hasSelection());
        assertEquals(1, actualUiDropDown.getSelected());
        assertSame(actualUiDropDown, actualUiDropDown.getReference().get());
    }

    @Test
    public void testConstructor4() {
        UIDropDown actualUiDropDown = new UIDropDown("foo", "foo", "foo");
        assertFalse(actualUiDropDown.isStarted());
        assertTrue(actualUiDropDown.isEnabled());
        assertFalse(actualUiDropDown.isAwake());
        assertFalse(actualUiDropDown.hasSelection());
        assertEquals(-1, actualUiDropDown.getSelected());
        assertSame(actualUiDropDown, actualUiDropDown.getReference().get());
    }

    @Test
    public void testGetSelectedOption() {
        assertNull((new UIDropDown()).getSelectedOption());
        assertNull((new UIDropDown("foo", "foo", "foo")).getSelectedOption());
        assertEquals("foo", (new UIDropDown(1, "foo", "foo", "foo")).getSelectedOption());
        assertNull((new UIDropDown(3, "foo", "foo", "foo")).getSelectedOption());
    }

    @Test
    public void testHasSelection() {
        assertFalse((new UIDropDown()).hasSelection());
        assertFalse((new UIDropDown("foo", "foo", "foo")).hasSelection());
        assertTrue((new UIDropDown(1, "foo", "foo", "foo")).hasSelection());
        assertFalse((new UIDropDown(3, "foo", "foo", "foo")).hasSelection());
    }

    @Test
    public void testSetOptions() {
        UIDropDown uiDropDown = new UIDropDown();
        uiDropDown.setOptions("foo", "foo", "foo");
        assertFalse(uiDropDown.hasSelection());
        assertEquals(-1, uiDropDown.getSelected());
    }

    @Test
    public void testFrameUpdate() {
        UIDropDown uiDropDown = new UIDropDown();
        uiDropDown.frameUpdate(0.5f);
        assertFalse(uiDropDown.isStarted());
        assertTrue(uiDropDown.isEnabled());
        assertFalse(uiDropDown.isAwake());
        assertFalse(uiDropDown.hasSelection());
        assertEquals(-1, uiDropDown.getSelected());
    }

    @Test
    public void testOnDestroy() {
        UIDropDown uiDropDown = new UIDropDown();
        uiDropDown.onDestroy();
        assertFalse(uiDropDown.isStarted());
        assertTrue(uiDropDown.isEnabled());
        assertFalse(uiDropDown.isAwake());
        assertFalse(uiDropDown.hasSelection());
        assertEquals(-1, uiDropDown.getSelected());
    }
}
