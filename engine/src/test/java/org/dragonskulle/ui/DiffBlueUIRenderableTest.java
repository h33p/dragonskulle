/* (C) 2021 DragonSkulle */
package org.dragonskulle.ui;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import org.dragonskulle.core.GameObject;
import org.dragonskulle.renderer.SampledTexture;
import org.dragonskulle.renderer.materials.IMaterial;
import org.joml.FrustumIntersection;
import org.joml.Vector3f;
import org.joml.Vector4f;
import org.junit.Test;

// The below tests were generated by https://www.diffblue.com/

public class DiffBlueUIRenderableTest {
    @Test
    public void testConstructor() {
        UIRenderable actualUiRenderable = new UIRenderable();
        assertEquals(0.0f, actualUiRenderable.getDepthShift(), 0.0f);
        assertFalse(actualUiRenderable.isStarted());
        assertTrue(actualUiRenderable.isMaintainAspect());
        assertTrue(actualUiRenderable.isHoverable());
        assertTrue(actualUiRenderable.isEnabled());
        assertFalse(actualUiRenderable.isAwake());
        assertEquals(0.0f, actualUiRenderable.getWidthHeightBlend(), 0.0f);
        IMaterial material = actualUiRenderable.getMaterial();
        assertTrue(material instanceof UIMaterial);
        assertSame(actualUiRenderable, actualUiRenderable.getReference().get());
        assertEquals(1.0f, ((UIMaterial) material).getAlpha(), 0.0f);
        assertEquals(1, material.getFragmentTextures().length);
        Vector4f colour = ((UIMaterial) material).getColour();
        assertEquals(1.0f, colour.x(), 0.0f);
        assertEquals(1.0f, colour.w(), 0.0f);
        assertEquals(1.0f, colour.z, 0.0f);
        assertEquals(1.0f, colour.y, 0.0f);
    }

    @Test
    public void testConstructor2() {
        UIRenderable actualUiRenderable = new UIRenderable(new SampledTexture("Texture Name"));
        assertEquals(0.0f, actualUiRenderable.getDepthShift(), 0.0f);
        assertFalse(actualUiRenderable.isStarted());
        assertTrue(actualUiRenderable.isMaintainAspect());
        assertTrue(actualUiRenderable.isHoverable());
        assertTrue(actualUiRenderable.isEnabled());
        assertFalse(actualUiRenderable.isAwake());
        assertEquals(0.0f, actualUiRenderable.getWidthHeightBlend(), 0.0f);
        IMaterial material = actualUiRenderable.getMaterial();
        assertTrue(material instanceof UIMaterial);
        assertSame(actualUiRenderable, actualUiRenderable.getReference().get());
        assertEquals(1.0f, ((UIMaterial) material).getAlpha(), 0.0f);
        assertEquals(1, material.getFragmentTextures().length);
        Vector4f colour = ((UIMaterial) material).getColour();
        assertEquals(1.0f, colour.x(), 0.0f);
        assertEquals(1.0f, colour.w(), 0.0f);
        assertEquals(1.0f, colour.z, 0.0f);
        assertEquals(1.0f, colour.y, 0.0f);
    }

    @Test
    public void testConstructor3() {
        UIRenderable actualUiRenderable = new UIRenderable(new Vector4f(10.0f));
        assertEquals(0.0f, actualUiRenderable.getDepthShift(), 0.0f);
        assertFalse(actualUiRenderable.isStarted());
        assertTrue(actualUiRenderable.isMaintainAspect());
        assertTrue(actualUiRenderable.isHoverable());
        assertTrue(actualUiRenderable.isEnabled());
        assertFalse(actualUiRenderable.isAwake());
        assertEquals(0.0f, actualUiRenderable.getWidthHeightBlend(), 0.0f);
        IMaterial material = actualUiRenderable.getMaterial();
        assertTrue(material instanceof UIMaterial);
        assertSame(actualUiRenderable, actualUiRenderable.getReference().get());
        assertEquals(10.0f, ((UIMaterial) material).getAlpha(), 0.0f);
        assertEquals(1, material.getFragmentTextures().length);
        Vector4f colour = ((UIMaterial) material).getColour();
        assertEquals(10.0f, colour.x(), 0.0f);
        assertEquals(10.0f, colour.w(), 0.0f);
        assertEquals(10.0f, colour.z, 0.0f);
        assertEquals(10.0f, colour.y, 0.0f);
    }

    @Test
    public void testConstructor4() {
        Vector4f colour = new Vector4f(10.0f);
        UIRenderable actualUiRenderable =
                new UIRenderable(colour, new SampledTexture("Texture Name"));
        assertEquals(0.0f, actualUiRenderable.getDepthShift(), 0.0f);
        assertFalse(actualUiRenderable.isStarted());
        assertTrue(actualUiRenderable.isMaintainAspect());
        assertTrue(actualUiRenderable.isHoverable());
        assertTrue(actualUiRenderable.isEnabled());
        assertFalse(actualUiRenderable.isAwake());
        assertEquals(0.0f, actualUiRenderable.getWidthHeightBlend(), 0.0f);
        IMaterial material = actualUiRenderable.getMaterial();
        assertTrue(material instanceof UIMaterial);
        assertSame(actualUiRenderable, actualUiRenderable.getReference().get());
        assertEquals(10.0f, ((UIMaterial) material).getAlpha(), 0.0f);
        assertEquals(1, material.getFragmentTextures().length);
        Vector4f colour1 = ((UIMaterial) material).getColour();
        assertEquals(10.0f, colour1.x(), 0.0f);
        assertEquals(10.0f, colour1.w(), 0.0f);
        assertEquals(10.0f, colour1.z, 0.0f);
        assertEquals(10.0f, colour1.y, 0.0f);
    }

    @Test
    public void testOnAwake() {
        UIRenderable uiRenderable = new UIRenderable();
        GameObject gameObject = new GameObject("Name");
        uiRenderable.setGameObject(gameObject);
        uiRenderable.onAwake();
        assertEquals(0.0f, uiRenderable.getDepthShift(), 0.0f);
        assertFalse(uiRenderable.isStarted());
        assertTrue(uiRenderable.isMaintainAspect());
        assertTrue(uiRenderable.isHoverable());
        assertTrue(uiRenderable.isEnabled());
        assertFalse(uiRenderable.isAwake());
        assertEquals(0.0f, uiRenderable.getWidthHeightBlend(), 0.0f);
        assertSame(gameObject, uiRenderable.getGameObject());
        assertTrue(uiRenderable.getMaterial() instanceof UIMaterial);
    }

    @Test
    public void testOnAwake2() {
        UIRenderable uiRenderable = new UIRenderable();
        uiRenderable.setMaintainAspect(false);
        uiRenderable.onAwake();
        assertEquals(0.0f, uiRenderable.getDepthShift(), 0.0f);
        assertFalse(uiRenderable.isStarted());
        assertFalse(uiRenderable.isMaintainAspect());
        assertTrue(uiRenderable.isHoverable());
        assertTrue(uiRenderable.isEnabled());
        assertFalse(uiRenderable.isAwake());
        assertEquals(0.0f, uiRenderable.getWidthHeightBlend(), 0.0f);
        assertTrue(uiRenderable.getMaterial() instanceof UIMaterial);
    }

    @Test
    public void testGetDepth() {
        UIRenderable uiRenderable = new UIRenderable();
        uiRenderable.setGameObject(new GameObject("Name"));
        Vector3f camPosition = new Vector3f(10.0f);
        assertEquals(0.0f, uiRenderable.getDepth(camPosition, new Vector3f(10.0f)), 0.0f);
    }

    @Test
    public void testFrustumCull() {
        UIRenderable uiRenderable = new UIRenderable();
        assertTrue(uiRenderable.frustumCull(new FrustumIntersection()));
    }
}
