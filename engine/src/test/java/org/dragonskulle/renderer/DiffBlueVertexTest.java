/* (C) 2021 DragonSkulle */
package org.dragonskulle.renderer;

import static org.junit.Assert.assertEquals;

import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector4f;
import org.junit.Test;

// The below tests were generated by https://www.diffblue.com/

public class DiffBlueVertexTest {
    @Test
    public void testConstructor() {
        Vertex actualVertex = new Vertex();
        Vector3f normal = actualVertex.getNormal();
        assertEquals(1.0f, normal.z, 0.0f);
        assertEquals(0.0f, actualVertex.getPos().z, 0.0f);
        assertEquals(1.0f, normal.z(), 0.0f);
        assertEquals(0.0f, normal.y(), 0.0f);
        assertEquals(0.0f, normal.x(), 0.0f);
        assertEquals(0.0f, actualVertex.getUv().x, 0.0f);
        Vector4f color = actualVertex.getColor();
        assertEquals(1.0f, color.y, 0.0f);
        assertEquals(1.0f, color.z(), 0.0f);
        assertEquals(1.0f, color.y(), 0.0f);
        assertEquals(1.0f, color.x(), 0.0f);
        assertEquals(1.0f, color.w(), 0.0f);
    }

    @Test
    public void testConstructor2() {
        Vector3f pos = new Vector3f(10.0f);
        Vertex actualVertex = new Vertex(pos, new Vector2f(10.0f));
        Vector3f normal = actualVertex.getNormal();
        assertEquals(1.0f, normal.z, 0.0f);
        Vector3f pos1 = actualVertex.getPos();
        assertEquals(10.0f, pos1.z, 0.0f);
        assertEquals(10.0f, pos1.z(), 0.0f);
        assertEquals(10.0f, pos1.y(), 0.0f);
        assertEquals(10.0f, pos1.x(), 0.0f);
        assertEquals(1.0f, normal.z(), 0.0f);
        assertEquals(0.0f, normal.y(), 0.0f);
        assertEquals(0.0f, normal.x(), 0.0f);
        Vector2f uv = actualVertex.getUv();
        assertEquals(10.0f, uv.x, 0.0f);
        assertEquals(10.0f, uv.y(), 0.0f);
        assertEquals(10.0f, uv.x(), 0.0f);
        Vector4f color = actualVertex.getColor();
        assertEquals(1.0f, color.y, 0.0f);
        assertEquals(1.0f, color.z(), 0.0f);
        assertEquals(1.0f, color.y(), 0.0f);
        assertEquals(1.0f, color.x(), 0.0f);
        assertEquals(1.0f, color.w(), 0.0f);
    }

    @Test
    public void testConstructor3() {
        Vector3f pos = new Vector3f(10.0f);
        Vector3f normal = new Vector3f(10.0f);
        Vector4f color = new Vector4f(10.0f);
        Vertex actualVertex = new Vertex(pos, normal, color, new Vector2f(10.0f));
        Vector3f normal1 = actualVertex.getNormal();
        assertEquals(10.0f, normal1.z, 0.0f);
        Vector3f pos1 = actualVertex.getPos();
        assertEquals(10.0f, pos1.z, 0.0f);
        assertEquals(10.0f, pos1.z(), 0.0f);
        assertEquals(10.0f, pos1.y(), 0.0f);
        assertEquals(10.0f, pos1.x(), 0.0f);
        assertEquals(10.0f, normal1.z(), 0.0f);
        assertEquals(10.0f, normal1.y(), 0.0f);
        assertEquals(10.0f, normal1.x(), 0.0f);
        Vector2f uv = actualVertex.getUv();
        assertEquals(10.0f, uv.x, 0.0f);
        assertEquals(10.0f, uv.y(), 0.0f);
        assertEquals(10.0f, uv.x(), 0.0f);
        Vector4f color1 = actualVertex.getColor();
        assertEquals(10.0f, color1.y, 0.0f);
        assertEquals(10.0f, color1.z(), 0.0f);
        assertEquals(10.0f, color1.y(), 0.0f);
        assertEquals(10.0f, color1.x(), 0.0f);
        assertEquals(10.0f, color1.w(), 0.0f);
    }

    @Test
    public void testConstructor4() {
        Vector3f pos = new Vector3f(10.0f);
        Vector4f color = new Vector4f(10.0f);
        Vertex actualVertex = new Vertex(pos, color, new Vector2f(10.0f));
        Vector3f normal = actualVertex.getNormal();
        assertEquals(1.0f, normal.z, 0.0f);
        Vector3f pos1 = actualVertex.getPos();
        assertEquals(10.0f, pos1.z, 0.0f);
        assertEquals(10.0f, pos1.z(), 0.0f);
        assertEquals(10.0f, pos1.y(), 0.0f);
        assertEquals(10.0f, pos1.x(), 0.0f);
        assertEquals(1.0f, normal.z(), 0.0f);
        assertEquals(0.0f, normal.y(), 0.0f);
        assertEquals(0.0f, normal.x(), 0.0f);
        Vector2f uv = actualVertex.getUv();
        assertEquals(10.0f, uv.x, 0.0f);
        assertEquals(10.0f, uv.y(), 0.0f);
        assertEquals(10.0f, uv.x(), 0.0f);
        Vector4f color1 = actualVertex.getColor();
        assertEquals(10.0f, color1.y, 0.0f);
        assertEquals(10.0f, color1.z(), 0.0f);
        assertEquals(10.0f, color1.y(), 0.0f);
        assertEquals(10.0f, color1.x(), 0.0f);
        assertEquals(10.0f, color1.w(), 0.0f);
    }
}
