/* (C) 2021 DragonSkulle */
package org.dragonskulle.renderer;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import org.joml.Vector2f;
import org.joml.Vector3f;
import org.joml.Vector3fc;
import org.joml.Vector4f;
import org.junit.Test;

// The below tests were generated by https://www.diffblue.com/

public class DiffBlueMeshTest {
    @Test
    public void testConstructor() {
        Vertex vertex = new Vertex();
        Vertex vertex1 = new Vertex();
        Mesh actualMesh =
                new Mesh(
                        new Vertexc[] {vertex, vertex1, new Vertex()},
                        new int[] {1, 1, 1, 1, 1, 1, 1, 1});
        Vector3fc bBCenter = actualMesh.getBBCenter();
        assertTrue(bBCenter instanceof Vector3f);
        assertEquals(3, actualMesh.getVertices().length);
        assertEquals(0, actualMesh.getRefCount());
        Vector3fc bBMax = actualMesh.getBBMax();
        assertTrue(bBMax instanceof Vector3f);
        assertEquals(8, actualMesh.getIndices().length);
        Vector3fc bBMin = actualMesh.getBBMin();
        assertTrue(bBMin instanceof Vector3f);
        assertEquals(0.0f, bBCenter.y(), 0.0f);
        assertEquals(0.0f, ((Vector3f) bBMin).z, 0.0f);
        assertEquals(0.0f, ((Vector3f) bBMin).y, 0.0f);
        assertEquals(0.0f, ((Vector3f) bBMin).x, 0.0f);
        assertEquals(0.0f, ((Vector3f) bBMax).y, 0.0f);
        assertEquals(0.0f, ((Vector3f) bBMax).x, 0.0f);
        assertEquals(0.0f, bBMax.z(), 0.0f);
        assertEquals(0.0f, bBCenter.z(), 0.0f);
        assertEquals(0.0f, bBCenter.x(), 0.0f);
    }

    @Test
    public void testConstructor2() {
        Mesh actualMesh = new Mesh(new Vertexc[] {}, new int[] {1, 1, 1, 1, 1, 1, 1, 1});
        Vector3fc bBCenter = actualMesh.getBBCenter();
        assertTrue(bBCenter instanceof Vector3f);
        assertEquals(0, actualMesh.getVertices().length);
        assertEquals(0, actualMesh.getRefCount());
        Vector3fc bBMax = actualMesh.getBBMax();
        assertTrue(bBMax instanceof Vector3f);
        assertEquals(8, actualMesh.getIndices().length);
        Vector3fc bBMin = actualMesh.getBBMin();
        assertTrue(bBMin instanceof Vector3f);
        assertEquals(0.0f, bBCenter.y(), 0.0f);
        assertEquals(0.0f, ((Vector3f) bBMin).z, 0.0f);
        assertEquals(0.0f, ((Vector3f) bBMin).y, 0.0f);
        assertEquals(0.0f, ((Vector3f) bBMin).x, 0.0f);
        assertEquals(0.0f, ((Vector3f) bBMax).y, 0.0f);
        assertEquals(0.0f, ((Vector3f) bBMax).x, 0.0f);
        assertEquals(0.0f, bBMax.z(), 0.0f);
        assertEquals(0.0f, bBCenter.z(), 0.0f);
        assertEquals(0.0f, bBCenter.x(), 0.0f);
    }

    @Test
    public void testAddQuadToList() {
        ArrayList<Vertex> vertexList = new ArrayList<Vertex>();
        ArrayList<Integer> indices = new ArrayList<Integer>();
        Vector2f startCoords = new Vector2f(10.0f);
        Vector2f endCoords = new Vector2f(10.0f);
        Vector2f startUV = new Vector2f(10.0f);
        Mesh.addQuadToList(
                vertexList, indices, startCoords, endCoords, startUV, new Vector2f(10.0f));
        assertEquals(4, vertexList.size());
        Vertex getResult = vertexList.get(2);
        Vector3f normal = getResult.getNormal();
        assertEquals(1.0f, normal.z, 0.0f);
        Vector3f pos = getResult.getPos();
        assertEquals(0.0f, pos.z, 0.0f);
        assertEquals(10.0f, pos.y, 0.0f);
        assertEquals(10.0f, pos.x, 0.0f);
        assertEquals(0.0f, normal.y, 0.0f);
        assertEquals(0.0f, normal.x, 0.0f);
        Vertex getResult1 = vertexList.get(3);
        Vector4f color = getResult1.getColor();
        assertEquals(1.0f, color.y, 0.0f);
        assertEquals(1.0f, color.x, 0.0f);
        assertEquals(1.0f, color.w, 0.0f);
        Vector4f color1 = getResult.getColor();
        assertEquals(1.0f, color1.y, 0.0f);
        assertEquals(1.0f, color1.x, 0.0f);
        assertEquals(1.0f, color1.w, 0.0f);
        Vertex getResult2 = vertexList.get(1);
        Vector3f pos1 = getResult2.getPos();
        assertEquals(10.0f, pos1.y, 0.0f);
        assertEquals(10.0f, pos1.x, 0.0f);
        Vertex getResult3 = vertexList.get(0);
        Vector3f pos2 = getResult3.getPos();
        assertEquals(10.0f, pos2.y, 0.0f);
        assertEquals(10.0f, pos2.x, 0.0f);
        Vector2f uv = getResult1.getUv();
        assertEquals(10.0f, uv.x, 0.0f);
        Vector3f normal1 = getResult2.getNormal();
        assertEquals(0.0f, normal1.y, 0.0f);
        assertEquals(0.0f, normal1.x, 0.0f);
        Vector4f color2 = getResult2.getColor();
        assertEquals(1.0f, color2.y, 0.0f);
        assertEquals(1.0f, color2.x, 0.0f);
        assertEquals(1.0f, color2.w, 0.0f);
        Vector3f normal2 = getResult3.getNormal();
        assertEquals(0.0f, normal2.y, 0.0f);
        assertEquals(0.0f, normal2.y(), 0.0f);
        assertEquals(0.0f, normal2.x(), 0.0f);
        Vector3f pos3 = getResult1.getPos();
        assertEquals(10.0f, pos3.y, 0.0f);
        assertEquals(0.0f, pos3.z(), 0.0f);
        assertEquals(10.0f, pos3.y(), 0.0f);
        assertEquals(10.0f, pos3.x(), 0.0f);
        Vector3f normal3 = getResult1.getNormal();
        assertEquals(0.0f, normal3.y, 0.0f);
        assertEquals(1.0f, normal3.z(), 0.0f);
        assertEquals(0.0f, normal3.y(), 0.0f);
        assertEquals(0.0f, normal3.x(), 0.0f);
        Vector4f color3 = getResult3.getColor();
        assertEquals(1.0f, color3.y, 0.0f);
        assertEquals(1.0f, color3.z(), 0.0f);
        assertEquals(1.0f, color3.y(), 0.0f);
        assertEquals(1.0f, color3.x(), 0.0f);
        assertEquals(1.0f, color3.w(), 0.0f);
        Vector2f uv1 = getResult3.getUv();
        assertEquals(10.0f, uv1.x, 0.0f);
        assertEquals(10.0f, uv1.y(), 0.0f);
        assertEquals(10.0f, uv1.x(), 0.0f);
        Vector2f uv2 = getResult.getUv();
        assertEquals(10.0f, uv2.x, 0.0f);
        assertEquals(10.0f, uv2.y(), 0.0f);
        assertEquals(10.0f, uv2.x(), 0.0f);
        Vector2f uv3 = getResult2.getUv();
        assertEquals(10.0f, uv3.x, 0.0f);
        assertEquals(10.0f, uv3.y(), 0.0f);
        assertEquals(10.0f, uv3.x(), 0.0f);
        assertEquals(0.0f, pos1.z, 0.0f);
        assertEquals(0.0f, pos2.z, 0.0f);
        assertEquals(1.0f, normal1.z, 0.0f);
        assertEquals(1.0f, color2.z, 0.0f);
        assertEquals(1.0f, color1.z, 0.0f);
        assertEquals(10.0f, uv.y, 0.0f);
        assertEquals(1.0f, color.z, 0.0f);
        assertEquals(1.0f, normal2.z, 0.0f);
    }

    @Test
    public void testAddQuadToList2() {
        ArrayList<Vertex> vertexList = new ArrayList<Vertex>();
        ArrayList<Integer> indices = new ArrayList<Integer>();
        Vector2f startCoords = new Vector2f(10.0f);
        Vector2f endCoords = new Vector2f(10.0f);
        Vector2f startUV = new Vector2f(10.0f);
        Vector2f endUV = new Vector2f(10.0f);
        Mesh.addQuadToList(
                vertexList, indices, startCoords, endCoords, startUV, endUV, new Vector4f(10.0f));
        assertEquals(4, vertexList.size());
        Vertex getResult = vertexList.get(2);
        Vector3f normal = getResult.getNormal();
        assertEquals(1.0f, normal.z, 0.0f);
        Vector3f pos = getResult.getPos();
        assertEquals(0.0f, pos.z, 0.0f);
        assertEquals(10.0f, pos.y, 0.0f);
        assertEquals(10.0f, pos.x, 0.0f);
        assertEquals(0.0f, normal.y, 0.0f);
        assertEquals(0.0f, normal.x, 0.0f);
        Vertex getResult1 = vertexList.get(3);
        Vector4f color = getResult1.getColor();
        assertEquals(10.0f, color.y, 0.0f);
        assertEquals(10.0f, color.x, 0.0f);
        assertEquals(10.0f, color.w, 0.0f);
        Vector4f color1 = getResult.getColor();
        assertEquals(10.0f, color1.y, 0.0f);
        assertEquals(10.0f, color1.x, 0.0f);
        assertEquals(10.0f, color1.w, 0.0f);
        Vertex getResult2 = vertexList.get(1);
        Vector3f pos1 = getResult2.getPos();
        assertEquals(10.0f, pos1.y, 0.0f);
        assertEquals(10.0f, pos1.x, 0.0f);
        Vertex getResult3 = vertexList.get(0);
        Vector3f pos2 = getResult3.getPos();
        assertEquals(10.0f, pos2.y, 0.0f);
        assertEquals(10.0f, pos2.x, 0.0f);
        Vector2f uv = getResult1.getUv();
        assertEquals(10.0f, uv.x, 0.0f);
        Vector3f normal1 = getResult2.getNormal();
        assertEquals(0.0f, normal1.y, 0.0f);
        assertEquals(0.0f, normal1.x, 0.0f);
        Vector4f color2 = getResult2.getColor();
        assertEquals(10.0f, color2.y, 0.0f);
        assertEquals(10.0f, color2.x, 0.0f);
        assertEquals(10.0f, color2.w, 0.0f);
        Vector3f normal2 = getResult3.getNormal();
        assertEquals(0.0f, normal2.y, 0.0f);
        assertEquals(0.0f, normal2.y(), 0.0f);
        assertEquals(0.0f, normal2.x(), 0.0f);
        Vector3f pos3 = getResult1.getPos();
        assertEquals(10.0f, pos3.y, 0.0f);
        assertEquals(0.0f, pos3.z(), 0.0f);
        assertEquals(10.0f, pos3.y(), 0.0f);
        assertEquals(10.0f, pos3.x(), 0.0f);
        Vector3f normal3 = getResult1.getNormal();
        assertEquals(0.0f, normal3.y, 0.0f);
        assertEquals(1.0f, normal3.z(), 0.0f);
        assertEquals(0.0f, normal3.y(), 0.0f);
        assertEquals(0.0f, normal3.x(), 0.0f);
        Vector4f color3 = getResult3.getColor();
        assertEquals(10.0f, color3.y, 0.0f);
        assertEquals(10.0f, color3.z(), 0.0f);
        assertEquals(10.0f, color3.y(), 0.0f);
        assertEquals(10.0f, color3.x(), 0.0f);
        assertEquals(10.0f, color3.w(), 0.0f);
        Vector2f uv1 = getResult3.getUv();
        assertEquals(10.0f, uv1.x, 0.0f);
        assertEquals(10.0f, uv1.y(), 0.0f);
        assertEquals(10.0f, uv1.x(), 0.0f);
        Vector2f uv2 = getResult.getUv();
        assertEquals(10.0f, uv2.x, 0.0f);
        assertEquals(10.0f, uv2.y(), 0.0f);
        assertEquals(10.0f, uv2.x(), 0.0f);
        Vector2f uv3 = getResult2.getUv();
        assertEquals(10.0f, uv3.x, 0.0f);
        assertEquals(10.0f, uv3.y(), 0.0f);
        assertEquals(10.0f, uv3.x(), 0.0f);
        assertEquals(0.0f, pos1.z, 0.0f);
        assertEquals(0.0f, pos2.z, 0.0f);
        assertEquals(1.0f, normal1.z, 0.0f);
        assertEquals(10.0f, color2.z, 0.0f);
        assertEquals(10.0f, color1.z, 0.0f);
        assertEquals(10.0f, uv.y, 0.0f);
        assertEquals(10.0f, color.z, 0.0f);
        assertEquals(1.0f, normal2.z, 0.0f);
    }

    @Test
    public void testBuildQuad() {
        Vector2f startCoords = new Vector2f(10.0f);
        Vector2f endCoords = new Vector2f(10.0f);
        Vector2f startUV = new Vector2f(10.0f);
        Mesh actualBuildQuadResult =
                Mesh.buildQuad(startCoords, endCoords, startUV, new Vector2f(10.0f));
        Vector3fc bBCenter = actualBuildQuadResult.getBBCenter();
        assertTrue(bBCenter instanceof Vector3f);
        assertTrue(actualBuildQuadResult.getVertices() instanceof Vertex[]);
        Vector3fc bBMax = actualBuildQuadResult.getBBMax();
        assertTrue(bBMax instanceof Vector3f);
        assertEquals(6, actualBuildQuadResult.getIndices().length);
        assertEquals(0, actualBuildQuadResult.getRefCount());
        Vector3fc bBMin = actualBuildQuadResult.getBBMin();
        assertTrue(bBMin instanceof Vector3f);
        assertEquals(0.0f, ((Vector3f) bBMax).z, 0.0f);
        assertEquals(0.0f, ((Vector3f) bBMin).z, 0.0f);
        assertEquals(10.0f, ((Vector3f) bBMin).y, 0.0f);
        assertEquals(10.0f, ((Vector3f) bBMin).x, 0.0f);
        assertEquals(10.0f, ((Vector3f) bBMax).y, 0.0f);
        assertEquals(10.0f, ((Vector3f) bBMax).x, 0.0f);
        assertEquals(10.0f, bBCenter.y(), 0.0f);
        assertEquals(10.0f, bBCenter.x(), 0.0f);
        assertEquals(0.0f, ((Vector3f) bBCenter).z, 0.0f);
    }

    @Test
    public void testIncRefCount() {
        Vector2f startCoords = new Vector2f(10.0f);
        Vector2f endCoords = new Vector2f(10.0f);
        Vector2f startUV = new Vector2f(10.0f);
        Mesh buildQuadResult = Mesh.buildQuad(startCoords, endCoords, startUV, new Vector2f(10.0f));
        buildQuadResult.incRefCount();
        assertEquals(1, buildQuadResult.getRefCount());
    }

    @Test
    public void testDecRefCount() {
        Vector2f startCoords = new Vector2f(10.0f);
        Vector2f endCoords = new Vector2f(10.0f);
        Vector2f startUV = new Vector2f(10.0f);
        Mesh buildQuadResult = Mesh.buildQuad(startCoords, endCoords, startUV, new Vector2f(10.0f));
        buildQuadResult.decRefCount();
        assertEquals(-1, buildQuadResult.getRefCount());
    }

    @Test
    public void testHashCode() {
        Vector2f startCoords = new Vector2f(10.0f);
        Vector2f endCoords = new Vector2f(10.0f);
        Vector2f startUV = new Vector2f(10.0f);
        assertEquals(
                1285031872,
                Mesh.buildQuad(startCoords, endCoords, startUV, new Vector2f(10.0f)).hashCode());
    }

    @Test
    public void testEquals() {
        Vector2f startCoords = new Vector2f(10.0f);
        Vector2f endCoords = new Vector2f(10.0f);
        Vector2f startUV = new Vector2f(10.0f);
        assertFalse(
                Mesh.buildQuad(startCoords, endCoords, startUV, new Vector2f(10.0f)).equals("42"));
    }

    @Test
    public void testEquals2() {
        Vector2f startCoords = new Vector2f(10.0f);
        Vector2f endCoords = new Vector2f(10.0f);
        Vector2f startUV = new Vector2f(10.0f);
        Mesh buildQuadResult = Mesh.buildQuad(startCoords, endCoords, startUV, new Vector2f(10.0f));
        Vector2f startCoords1 = new Vector2f(10.0f);
        Vector2f endCoords1 = new Vector2f(10.0f);
        Vector2f startUV1 = new Vector2f(10.0f);
        Mesh buildQuadResult1 =
                Mesh.buildQuad(startCoords1, endCoords1, startUV1, new Vector2f(10.0f));
        assertTrue(buildQuadResult.equals(buildQuadResult1));
        assertEquals(buildQuadResult, buildQuadResult1);
    }

    @Test
    public void testEquals3() {
        Vector2f startCoords = new Vector2f(10.0f);
        Vector2f endCoords = new Vector2f(10.0f);
        Vector2f startUV = new Vector2f(10.0f);
        Mesh buildQuadResult = Mesh.buildQuad(startCoords, endCoords, startUV, new Vector2f(10.0f));
        Vertex vertex = new Vertex();
        Vertex vertex1 = new Vertex();
        assertFalse(
                buildQuadResult.equals(
                        new Mesh(
                                new Vertexc[] {vertex, vertex1, new Vertex()},
                                new int[] {1, 1, 1, 1, 1, 1, 1, 1})));
    }
}
