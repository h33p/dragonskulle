/* (C) 2021 DragonSkulle */
package org.dragonskulle.renderer.components;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import org.dragonskulle.core.GameObject;
import org.dragonskulle.renderer.Mesh;
import org.dragonskulle.renderer.Vertex;
import org.dragonskulle.renderer.Vertexc;
import org.dragonskulle.renderer.materials.IMaterial;
import org.dragonskulle.renderer.materials.PBRMaterial;
import org.dragonskulle.renderer.materials.UnlitMaterial;
import org.joml.FrustumIntersection;
import org.joml.Matrix4f;
import org.joml.Vector3f;
import org.joml.Vector4f;
import org.junit.Test;

// The below tests were generated by https://www.diffblue.com/

public class DiffBlueRenderableTest {
    @Test
    public void testConstructor() {
        Renderable actualRenderable = new Renderable();
        IMaterial expectedMaterial = actualRenderable.mMaterial;
        IMaterial material = actualRenderable.getMaterial();
        assertSame(expectedMaterial, material);
        assertFalse(actualRenderable.isAwake());
        assertTrue(actualRenderable.isEnabled());
        assertFalse(actualRenderable.isStarted());
        assertEquals(0.0f, actualRenderable.mAABBMax.z, 0.0f);
        assertEquals(0.0f, actualRenderable.mAABBMin.z, 0.0f);
        assertEquals(0.0f, actualRenderable.mTmpBB.z, 0.0f);
        assertSame(actualRenderable, actualRenderable.getReference().get());
        assertEquals(1, material.getFragmentTextures().length);
        assertEquals(1.0f, ((UnlitMaterial) material).getAlpha(), 0.0f);
        Vector4f colour = ((UnlitMaterial) material).getColour();
        assertEquals(1.0f, colour.z, 0.0f);
        assertEquals(1.0f, colour.y, 0.0f);
        assertEquals(1.0f, colour.x, 0.0f);
    }

    @Test
    public void testConstructor2() {
        Vertex vertex = new Vertex();
        Vertex vertex1 = new Vertex();
        Mesh mesh =
                new Mesh(
                        new Vertexc[] {vertex, vertex1, new Vertex()},
                        new int[] {1, 1, 1, 1, 1, 1, 1, 1});
        Renderable actualRenderable = new Renderable(mesh, new PBRMaterial());
        IMaterial expectedMaterial = actualRenderable.mMaterial;
        assertSame(expectedMaterial, actualRenderable.getMaterial());
        assertFalse(actualRenderable.isAwake());
        Mesh mesh1 = actualRenderable.getMesh();
        assertSame(mesh, mesh1);
        assertTrue(actualRenderable.isEnabled());
        assertFalse(actualRenderable.isStarted());
        assertEquals(1, mesh1.getRefCount());
        assertEquals(0.0f, actualRenderable.mAABBMax.z, 0.0f);
        assertEquals(0.0f, actualRenderable.mAABBMin.z, 0.0f);
        assertEquals(0.0f, actualRenderable.mTmpBB.z, 0.0f);
        assertSame(actualRenderable, actualRenderable.getReference().get());
    }

    @Test
    public void testConstructor3() {
        Renderable actualRenderable = new Renderable(null, new PBRMaterial());
        IMaterial expectedMaterial = actualRenderable.mMaterial;
        assertSame(expectedMaterial, actualRenderable.getMaterial());
        assertFalse(actualRenderable.isAwake());
        assertNull(actualRenderable.getMesh());
        assertTrue(actualRenderable.isEnabled());
        assertFalse(actualRenderable.isStarted());
        assertEquals(0.0f, actualRenderable.mAABBMax.z, 0.0f);
        assertEquals(0.0f, actualRenderable.mAABBMin.z, 0.0f);
        assertEquals(0.0f, actualRenderable.mTmpBB.z, 0.0f);
        assertSame(actualRenderable, actualRenderable.getReference().get());
    }

    @Test
    public void testGetMaterial() {
        Renderable renderable = new Renderable();
        assertSame(renderable.mMaterial, renderable.<IMaterial>getMaterial(IMaterial.class));
    }

    @Test
    public void testGetDepth() {
        Renderable renderable = new Renderable();
        renderable.setGameObject(new GameObject("Name"));
        Vector3f camPosition = new Vector3f(10.0f);
        Vector3f vector3f = new Vector3f(10.0f);
        assertEquals(300.0f, renderable.getDepth(camPosition, vector3f), 0.0f);
        assertEquals(0.0f, vector3f.z, 0.0f);
        assertEquals(0.0f, vector3f.y, 0.0f);
        assertEquals(0.0f, vector3f.x, 0.0f);
    }

    @Test
    public void testSetMesh() {
        Renderable renderable = new Renderable();
        Vertex vertex = new Vertex();
        Vertex vertex1 = new Vertex();
        Mesh mesh =
                new Mesh(
                        new Vertexc[] {vertex, vertex1, new Vertex()},
                        new int[] {1, 1, 1, 1, 1, 1, 1, 1});
        renderable.setMesh(mesh);
        assertEquals(1, mesh.getRefCount());
        assertSame(mesh, renderable.getMesh());
    }

    @Test
    public void testSetMesh2() {
        Renderable renderable = new Renderable();
        renderable.setMesh(null);
        assertNull(renderable.getMesh());
    }

    @Test
    public void testSetMesh3() {
        Renderable renderable = new Renderable(null, new PBRMaterial());
        Vertex vertex = new Vertex();
        Vertex vertex1 = new Vertex();
        Mesh mesh =
                new Mesh(
                        new Vertexc[] {vertex, vertex1, new Vertex()},
                        new int[] {1, 1, 1, 1, 1, 1, 1, 1});
        renderable.setMesh(mesh);
        assertEquals(1, mesh.getRefCount());
        assertSame(mesh, renderable.getMesh());
    }

    @Test
    public void testFrustumCull() {
        Renderable renderable = new Renderable();
        renderable.setGameObject(new GameObject("Name"));
        assertTrue(renderable.frustumCull(new FrustumIntersection()));
        Vector3f vector3f = renderable.mAABBMin;
        assertEquals(-0.86603f, vector3f.x(), 0.0f);
        assertEquals(-1.0f, vector3f.y(), 0.0f);
        assertEquals(0.0f, vector3f.z(), 0.0f);
        Vector3f vector3f1 = renderable.mTmpBB;
        assertEquals(0.86603f, vector3f1.x(), 0.0f);
        assertEquals(1.0f, vector3f1.y(), 0.0f);
        assertEquals(0.0f, vector3f1.z(), 0.0f);
        Vector3f vector3f2 = renderable.mAABBMax;
        assertEquals(0.0f, vector3f2.z(), 0.0f);
        assertEquals(1.0f, vector3f2.y(), 0.0f);
        assertEquals(0.86603f, vector3f2.x(), 0.0f);
    }

    @Test
    public void testFrustumCull2() {
        Renderable renderable = new Renderable();
        renderable.setMesh(null);
        renderable.setGameObject(new GameObject("Name"));
        assertFalse(renderable.frustumCull(null));
    }

    @Test
    public void testFrustumCull3() {
        Renderable renderable = new Renderable();
        renderable.setGameObject(new GameObject("Name"));
        assertFalse(
                renderable.frustumCull(
                        new FrustumIntersection(
                                new Matrix4f(
                                        10.0f, 10.0f, 10.0f, 10.0f, 10.0f, 10.0f, 10.0f, 10.0f,
                                        10.0f, 10.0f, 10.0f, 10.0f, 10.0f, 10.0f, 10.0f, 10.0f))));
        Vector3f vector3f = renderable.mAABBMin;
        assertEquals(-0.86603f, vector3f.x(), 0.0f);
        assertEquals(-1.0f, vector3f.y(), 0.0f);
        assertEquals(0.0f, vector3f.z(), 0.0f);
        Vector3f vector3f1 = renderable.mTmpBB;
        assertEquals(0.86603f, vector3f1.x(), 0.0f);
        assertEquals(1.0f, vector3f1.y(), 0.0f);
        assertEquals(0.0f, vector3f1.z(), 0.0f);
        Vector3f vector3f2 = renderable.mAABBMax;
        assertEquals(0.0f, vector3f2.z(), 0.0f);
        assertEquals(1.0f, vector3f2.y(), 0.0f);
        assertEquals(0.86603f, vector3f2.x(), 0.0f);
    }

    @Test
    public void testOnDestroy() {
        Renderable renderable = new Renderable();
        renderable.onDestroy();
        assertNull(renderable.getMesh());
    }
}
