/* (C) 2021 DragonSkulle */
package org.dragonskulle.renderer.components;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import org.dragonskulle.components.Transform3D;
import org.dragonskulle.core.GameObject;
import org.joml.Matrix4f;
import org.joml.Matrix4fc;
import org.joml.Vector3f;
import org.joml.Vector4f;
import org.junit.Test;

// The below tests were generated by https://www.diffblue.com/

public class DiffBlueCameraTest {
    @Test
    public void testScreenToPlane() {
        Camera camera = new Camera();
        camera.setGameObject(new GameObject("Name"));
        Transform3D transform3D = new Transform3D();
        Vector3f vector3f = new Vector3f(10.0f);
        Vector3f actualScreenToPlaneResult =
                camera.screenToPlane(transform3D, 10.0f, 10.0f, 10.0f, vector3f);
        assertSame(vector3f, actualScreenToPlaneResult);
        assertEquals(0.0f, actualScreenToPlaneResult.z, 0.0f);
        assertEquals(-2.1105292f, actualScreenToPlaneResult.y, 0.0f);
        assertEquals(-9.999998f, actualScreenToPlaneResult.x, 0.0f);
        Matrix4fc localMatrix = transform3D.getLocalMatrix();
        assertTrue(localMatrix instanceof Matrix4f);
        Matrix4fc worldMatrix = transform3D.getWorldMatrix();
        assertEquals(worldMatrix, localMatrix);
        assertTrue(transform3D.getInvWorldMatrix() instanceof Matrix4f);
        assertEquals(0.0f, transform3D.getPosition().x, 0.0f);
        assertEquals(1.0f, worldMatrix.determinant3x3(), 0.0f);
        assertSame(worldMatrix, ((Matrix4f) worldMatrix).cofactor3x3());
        Vector4f vector4f = camera.mNear;
        assertEquals(-0.23702586f, vector4f.z, 0.0f);
        assertEquals(0.05002501f, vector4f.y, 0.0f);
        assertEquals(0.23702586f, vector4f.x, 0.0f);
        assertEquals(1.0f, vector4f.w, 0.0f);
        Vector4f vector4f1 = camera.mFar;
        assertEquals(99.99771f, vector4f1.y, 0.0f);
        assertEquals(473.8039f, vector4f1.x, 0.0f);
        assertEquals(1.0f, vector4f1.w, 0.0f);
        assertEquals(-473.8039f, vector4f1.z, 0.0f);
    }

    @Test
    public void testUpdateAspectRatio() {
        Camera camera = new Camera();
        camera.updateAspectRatio(1, 1);
        assertEquals(1.0f, camera.getAspectRatio(), 0.0f);
    }

    @Test
    public void testOnDestroy() {
        Camera camera = new Camera();
        camera.onDestroy();
        assertEquals(1.0f, camera.getAspectRatio(), 0.0f);
        assertEquals(100.0f, camera.getFarPlane(), 0.0f);
        assertEquals(Camera.Projection.PERSPECTIVE, camera.getProjection());
        assertEquals(0.1f, camera.getNearPlane(), 0.0f);
        assertFalse(camera.isAwake());
        assertEquals(70.0f, camera.getFov(), 0.0f);
        assertEquals(10.0f, camera.getOrthographicSize(), 0.0f);
        assertTrue(camera.isEnabled());
        assertFalse(camera.isStarted());
        assertTrue(camera.getProj() instanceof org.joml.Matrix4f);
        assertEquals(1.0f, camera.mFar.z, 0.0f);
        assertEquals(0.0f, camera.mNear.y, 0.0f);
    }
}
