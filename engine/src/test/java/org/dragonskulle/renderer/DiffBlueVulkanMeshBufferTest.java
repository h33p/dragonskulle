/* (C) 2021 DragonSkulle */
package org.dragonskulle.renderer;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import org.joml.Vector2f;
import org.junit.Test;

// The below tests were generated by https://www.diffblue.com/

public class DiffBlueVulkanMeshBufferTest {
    @Test
    public void testGetVertexBuffer() {
        assertEquals(0L, (new VulkanMeshBuffer(null, null)).getVertexBuffer());
    }

    @Test
    public void testGetMeshDescriptor() {
        VulkanMeshBuffer vulkanMeshBuffer = new VulkanMeshBuffer(null, null);
        Vector2f startCoords = new Vector2f(10.0f);
        Vector2f endCoords = new Vector2f(10.0f);
        Vector2f startUV = new Vector2f(10.0f);
        assertNull(
                vulkanMeshBuffer.getMeshDescriptor(
                        Mesh.buildQuad(startCoords, endCoords, startUV, new Vector2f(10.0f))));
    }

    @Test
    public void testAddMesh() {
        VulkanMeshBuffer vulkanMeshBuffer = new VulkanMeshBuffer(null, null);
        Vector2f startCoords = new Vector2f(10.0f);
        Vector2f endCoords = new Vector2f(10.0f);
        Vector2f startUV = new Vector2f(10.0f);
        VulkanMeshBuffer.MeshDescriptor actualAddMeshResult =
                vulkanMeshBuffer.addMesh(
                        Mesh.buildQuad(startCoords, endCoords, startUV, new Vector2f(10.0f)));
        assertEquals(6, actualAddMeshResult.getIndexCount());
        assertEquals(0, actualAddMeshResult.getVertexOffset());
        assertEquals(0, actualAddMeshResult.getIndexOffset());
        assertEquals(Vertexc.COL_OFFSET, vulkanMeshBuffer.getMaxIndexOffset());
        assertTrue(vulkanMeshBuffer.isDirty());
        assertEquals(208, vulkanMeshBuffer.getMaxVertexOffset());
    }

    @Test
    public void testCommitChanges() {
        VulkanMeshBuffer vulkanMeshBuffer = new VulkanMeshBuffer(null, null);
        assertSame(vulkanMeshBuffer, vulkanMeshBuffer.commitChanges(null, 1L));
    }

    @Test
    public void testCleanupUnusedMeshes() {
        VulkanMeshBuffer vulkanMeshBuffer = new VulkanMeshBuffer(null, null);
        vulkanMeshBuffer.cleanupUnusedMeshes();
        assertEquals(0, vulkanMeshBuffer.getMaxIndexOffset());
        assertFalse(vulkanMeshBuffer.isDirty());
        assertEquals(0L, vulkanMeshBuffer.getVertexBuffer());
        assertEquals(0, vulkanMeshBuffer.getMaxVertexOffset());
    }

    @Test
    public void testFree() {
        VulkanMeshBuffer vulkanMeshBuffer = new VulkanMeshBuffer(null, null);
        vulkanMeshBuffer.free();
        assertEquals(0L, vulkanMeshBuffer.getVertexBuffer());
    }
}
