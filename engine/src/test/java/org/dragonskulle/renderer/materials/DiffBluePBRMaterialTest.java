/* (C) 2021 DragonSkulle */
package org.dragonskulle.renderer.materials;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import org.dragonskulle.renderer.AttributeDescription;
import org.dragonskulle.renderer.BindingDescription;
import org.dragonskulle.renderer.SampledTexture;
import org.dragonskulle.renderer.ShaderBuf;
import org.joml.Vector2i;
import org.joml.Vector3f;
import org.joml.Vector4f;
import org.junit.Test;

// The below tests were generated by https://www.diffblue.com/

public class DiffBluePBRMaterialTest {
    @Test
    public void testHashShaderSet() {
        assertEquals(0, (new PBRMaterial()).hashShaderSet());
        assertEquals(8, (new PBRMaterial(new SampledTexture("Texture Name"))).hashShaderSet());
    }

    @Test
    public void testHashShaderSet2() {
        PBRMaterial pbrMaterial = new PBRMaterial();
        pbrMaterial.setAlphaBlend(true);
        assertEquals(1, pbrMaterial.hashShaderSet());
    }

    @Test
    public void testConstructor() {
        PBRMaterial actualPbrMaterial = new PBRMaterial();
        assertFalse(actualPbrMaterial.isAlphaBlend());
        assertEquals(1.0f, actualPbrMaterial.getRoughness(), 0.0f);
        assertEquals(1.0f, actualPbrMaterial.getAlpha(), 0.0f);
        assertEquals(1.0f, actualPbrMaterial.getNormal(), 0.0f);
        assertEquals(0.0f, actualPbrMaterial.getAlphaCutoff(), 0.0f);
        assertEquals(1.0f, actualPbrMaterial.getMetallic(), 0.0f);
        Vector3f emissionColour = actualPbrMaterial.getEmissionColour();
        assertEquals(0.0f, emissionColour.x, 0.0f);
        assertEquals(0.0f, emissionColour.z(), 0.0f);
        assertEquals(0.0f, emissionColour.y(), 0.0f);
        assertEquals(0.0f, emissionColour.x(), 0.0f);
        Vector4f colour = actualPbrMaterial.getColour();
        assertEquals(1.0f, colour.z(), 0.0f);
        assertEquals(1.0f, colour.y(), 0.0f);
        assertEquals(1.0f, colour.x(), 0.0f);
        assertEquals(1.0f, colour.w(), 0.0f);
    }

    @Test
    public void testConstructor2() {
        PBRMaterial actualPbrMaterial = new PBRMaterial(new SampledTexture("Texture Name"));
        SampledTexture expectedAlbedoMap = actualPbrMaterial.mAlbedoMap;
        assertSame(expectedAlbedoMap, actualPbrMaterial.getAlbedoMap());
        assertEquals(1.0f, actualPbrMaterial.getAlpha(), 0.0f);
        assertEquals(1.0f, actualPbrMaterial.getNormal(), 0.0f);
        assertEquals(1.0f, actualPbrMaterial.getRoughness(), 0.0f);
        assertEquals(0.0f, actualPbrMaterial.getAlphaCutoff(), 0.0f);
        assertFalse(actualPbrMaterial.isAlphaBlend());
        assertEquals(1.0f, actualPbrMaterial.getMetallic(), 0.0f);
        Vector3f emissionColour = actualPbrMaterial.getEmissionColour();
        assertEquals(0.0f, emissionColour.z, 0.0f);
        Vector4f colour = actualPbrMaterial.getColour();
        assertEquals(1.0f, colour.w(), 0.0f);
        assertEquals(1.0f, colour.x(), 0.0f);
        assertEquals(1.0f, colour.y(), 0.0f);
        assertEquals(1.0f, colour.z(), 0.0f);
        assertEquals(0.0f, emissionColour.z(), 0.0f);
        assertEquals(0.0f, emissionColour.x(), 0.0f);
        assertEquals(0.0f, emissionColour.y(), 0.0f);
    }

    @Test
    public void testConstructor3() {
        SampledTexture albedoMap = new SampledTexture("Texture Name");
        PBRMaterial actualPbrMaterial = new PBRMaterial(albedoMap, new Vector4f(10.0f));
        SampledTexture expectedAlbedoMap = actualPbrMaterial.mAlbedoMap;
        assertSame(expectedAlbedoMap, actualPbrMaterial.getAlbedoMap());
        assertEquals(10.0f, actualPbrMaterial.getAlpha(), 0.0f);
        assertEquals(1.0f, actualPbrMaterial.getNormal(), 0.0f);
        assertEquals(1.0f, actualPbrMaterial.getRoughness(), 0.0f);
        assertEquals(0.0f, actualPbrMaterial.getAlphaCutoff(), 0.0f);
        assertFalse(actualPbrMaterial.isAlphaBlend());
        assertEquals(1.0f, actualPbrMaterial.getMetallic(), 0.0f);
        Vector3f emissionColour = actualPbrMaterial.getEmissionColour();
        assertEquals(0.0f, emissionColour.z, 0.0f);
        Vector4f colour = actualPbrMaterial.getColour();
        assertEquals(10.0f, colour.w(), 0.0f);
        assertEquals(10.0f, colour.x(), 0.0f);
        assertEquals(10.0f, colour.y(), 0.0f);
        assertEquals(10.0f, colour.z(), 0.0f);
        assertEquals(0.0f, emissionColour.z(), 0.0f);
        assertEquals(0.0f, emissionColour.x(), 0.0f);
        assertEquals(0.0f, emissionColour.y(), 0.0f);
    }

    @Test
    public void testConstructor4() {
        PBRMaterial actualPbrMaterial = new PBRMaterial(new Vector4f(10.0f));
        assertFalse(actualPbrMaterial.isAlphaBlend());
        assertEquals(1.0f, actualPbrMaterial.getRoughness(), 0.0f);
        assertEquals(10.0f, actualPbrMaterial.getAlpha(), 0.0f);
        assertEquals(1.0f, actualPbrMaterial.getNormal(), 0.0f);
        assertEquals(0.0f, actualPbrMaterial.getAlphaCutoff(), 0.0f);
        assertEquals(1.0f, actualPbrMaterial.getMetallic(), 0.0f);
        Vector3f emissionColour = actualPbrMaterial.getEmissionColour();
        assertEquals(0.0f, emissionColour.x, 0.0f);
        assertEquals(0.0f, emissionColour.z(), 0.0f);
        assertEquals(0.0f, emissionColour.y(), 0.0f);
        assertEquals(0.0f, emissionColour.x(), 0.0f);
        Vector4f colour = actualPbrMaterial.getColour();
        assertEquals(10.0f, colour.z(), 0.0f);
        assertEquals(10.0f, colour.y(), 0.0f);
        assertEquals(10.0f, colour.x(), 0.0f);
        assertEquals(10.0f, colour.w(), 0.0f);
    }

    @Test
    public void testConstructor5() {
        Vector4f vector4f = new Vector4f(new Vector2i(1), 10.0f, 10.0f);
        vector4f.add(new Vector4f(10.0f));
        PBRMaterial actualPbrMaterial = new PBRMaterial(vector4f);
        assertFalse(actualPbrMaterial.isAlphaBlend());
        assertEquals(1.0f, actualPbrMaterial.getRoughness(), 0.0f);
        assertEquals(20.0f, actualPbrMaterial.getAlpha(), 0.0f);
        assertEquals(1.0f, actualPbrMaterial.getNormal(), 0.0f);
        assertEquals(0.0f, actualPbrMaterial.getAlphaCutoff(), 0.0f);
        assertEquals(1.0f, actualPbrMaterial.getMetallic(), 0.0f);
        Vector3f emissionColour = actualPbrMaterial.getEmissionColour();
        assertEquals(0.0f, emissionColour.x, 0.0f);
        assertEquals(0.0f, emissionColour.z(), 0.0f);
        assertEquals(0.0f, emissionColour.y(), 0.0f);
        assertEquals(0.0f, emissionColour.x(), 0.0f);
        Vector4f colour = actualPbrMaterial.getColour();
        assertEquals(20.0f, colour.z(), 0.0f);
        assertEquals(11.0f, colour.y(), 0.0f);
        assertEquals(11.0f, colour.x(), 0.0f);
        assertEquals(20.0f, colour.w(), 0.0f);
    }

    @Test
    public void testStandardShaderSetConstructor() {
        PBRMaterial.StandardShaderSet actualStandardShaderSet =
                new PBRMaterial.StandardShaderSet(new PBRMaterial());
        assertEquals(0, actualStandardShaderSet.getFragmentPushConstantSize());
        assertFalse(actualStandardShaderSet.isVertexUniformDataDirty());
        assertFalse(actualStandardShaderSet.isPreSort());
        assertFalse(actualStandardShaderSet.isGeometryUniformDataDirty());
        assertFalse(actualStandardShaderSet.isFragmentUniformDataDirty());
        assertTrue(actualStandardShaderSet.isDepthTest());
        assertFalse(actualStandardShaderSet.isAlphaBlend());
        assertEquals(0, actualStandardShaderSet.getVertexUniformDataSize());
        assertEquals(15, actualStandardShaderSet.getVertexAttributeDescriptions().length);
        assertEquals(1000, actualStandardShaderSet.getRenderOrder());
        assertEquals(0, actualStandardShaderSet.getGeometryUniformDataSize());
        assertEquals(0, actualStandardShaderSet.getNumFragmentTextures());
        assertEquals(2, actualStandardShaderSet.getLightCount());
        assertEquals(0, actualStandardShaderSet.getFragmentUniformDataSize());
        BindingDescription vertexBindingDescription =
                actualStandardShaderSet.getVertexBindingDescription();
        assertEquals(1, vertexBindingDescription.mInputRate);
        assertEquals(1, vertexBindingDescription.mBindingId);
        assertEquals(168, vertexBindingDescription.mSize);
    }

    @Test
    public void testStandardShaderSetConstructor2() {
        PBRMaterial.StandardShaderSet actualStandardShaderSet =
                new PBRMaterial.StandardShaderSet(
                        new PBRMaterial(new SampledTexture("Texture Name")));
        assertEquals(0, actualStandardShaderSet.getFragmentPushConstantSize());
        assertFalse(actualStandardShaderSet.isVertexUniformDataDirty());
        assertFalse(actualStandardShaderSet.isPreSort());
        assertFalse(actualStandardShaderSet.isGeometryUniformDataDirty());
        assertFalse(actualStandardShaderSet.isFragmentUniformDataDirty());
        assertTrue(actualStandardShaderSet.isDepthTest());
        assertFalse(actualStandardShaderSet.isAlphaBlend());
        assertEquals(0, actualStandardShaderSet.getVertexUniformDataSize());
        assertEquals(15, actualStandardShaderSet.getVertexAttributeDescriptions().length);
        assertEquals(1000, actualStandardShaderSet.getRenderOrder());
        assertEquals(0, actualStandardShaderSet.getGeometryUniformDataSize());
        assertEquals(1, actualStandardShaderSet.getNumFragmentTextures());
        assertEquals(2, actualStandardShaderSet.getLightCount());
        assertEquals(0, actualStandardShaderSet.getFragmentUniformDataSize());
        BindingDescription vertexBindingDescription =
                actualStandardShaderSet.getVertexBindingDescription();
        assertEquals(1, vertexBindingDescription.mInputRate);
        assertEquals(1, vertexBindingDescription.mBindingId);
        assertEquals(168, vertexBindingDescription.mSize);
    }

    @Test
    public void testStandardShaderSetConstructor3() {
        PBRMaterial pbrMaterial = new PBRMaterial();
        pbrMaterial.setAlphaBlend(true);
        PBRMaterial.StandardShaderSet actualStandardShaderSet =
                new PBRMaterial.StandardShaderSet(pbrMaterial);
        assertEquals(0, actualStandardShaderSet.getFragmentPushConstantSize());
        assertFalse(actualStandardShaderSet.isVertexUniformDataDirty());
        assertTrue(actualStandardShaderSet.isPreSort());
        assertFalse(actualStandardShaderSet.isGeometryUniformDataDirty());
        assertFalse(actualStandardShaderSet.isFragmentUniformDataDirty());
        assertTrue(actualStandardShaderSet.isDepthTest());
        assertTrue(actualStandardShaderSet.isAlphaBlend());
        assertEquals(0, actualStandardShaderSet.getVertexUniformDataSize());
        assertEquals(15, actualStandardShaderSet.getVertexAttributeDescriptions().length);
        assertEquals(2000, actualStandardShaderSet.getRenderOrder());
        assertEquals(0, actualStandardShaderSet.getGeometryUniformDataSize());
        assertEquals(0, actualStandardShaderSet.getNumFragmentTextures());
        assertEquals(2, actualStandardShaderSet.getLightCount());
        assertEquals(0, actualStandardShaderSet.getFragmentUniformDataSize());
        BindingDescription vertexBindingDescription =
                actualStandardShaderSet.getVertexBindingDescription();
        assertEquals(1, vertexBindingDescription.mInputRate);
        assertEquals(1, vertexBindingDescription.mBindingId);
        assertEquals(168, vertexBindingDescription.mSize);
    }

    @Test
    public void testStandardShaderSetConstructor4() {
        PBRMaterial mat = new PBRMaterial();
        ArrayList<ShaderBuf.MacroDefinition> fragMacroDefs =
                new ArrayList<ShaderBuf.MacroDefinition>();
        ArrayList<ShaderBuf.MacroDefinition> vertMacroDefs =
                new ArrayList<ShaderBuf.MacroDefinition>();
        AttributeDescription attributeDescription = new AttributeDescription(123, 1, 1, 2);
        AttributeDescription attributeDescription1 = new AttributeDescription(123, 1, 1, 2);
        PBRMaterial.StandardShaderSet actualStandardShaderSet =
                new PBRMaterial.StandardShaderSet(
                        mat,
                        "Shader Name",
                        fragMacroDefs,
                        vertMacroDefs,
                        3,
                        attributeDescription,
                        attributeDescription1,
                        new AttributeDescription(123, 1, 1, 2));
        assertEquals(0, actualStandardShaderSet.getFragmentPushConstantSize());
        assertFalse(actualStandardShaderSet.isVertexUniformDataDirty());
        assertFalse(actualStandardShaderSet.isPreSort());
        assertFalse(actualStandardShaderSet.isGeometryUniformDataDirty());
        assertFalse(actualStandardShaderSet.isFragmentUniformDataDirty());
        assertTrue(actualStandardShaderSet.isDepthTest());
        assertFalse(actualStandardShaderSet.isAlphaBlend());
        assertEquals(0, actualStandardShaderSet.getVertexUniformDataSize());
        assertNull(actualStandardShaderSet.getVertexShader());
        assertEquals(18, actualStandardShaderSet.getVertexAttributeDescriptions().length);
        assertNull(actualStandardShaderSet.getFragmentShader());
        assertEquals(1000, actualStandardShaderSet.getRenderOrder());
        assertEquals(0, actualStandardShaderSet.getGeometryUniformDataSize());
        assertEquals(0, actualStandardShaderSet.getNumFragmentTextures());
        assertEquals(2, actualStandardShaderSet.getLightCount());
        assertEquals(0, actualStandardShaderSet.getFragmentUniformDataSize());
        BindingDescription vertexBindingDescription =
                actualStandardShaderSet.getVertexBindingDescription();
        assertEquals(1, vertexBindingDescription.mInputRate);
        assertEquals(1, vertexBindingDescription.mBindingId);
        assertEquals(171, vertexBindingDescription.mSize);
    }

    @Test
    public void testGetShaderSet() {
        assertTrue((new PBRMaterial()).getShaderSet() instanceof PBRMaterial.StandardShaderSet);
        assertTrue(
                (new PBRMaterial(new SampledTexture("Texture Name"))).getShaderSet()
                        instanceof PBRMaterial.StandardShaderSet);
    }

    @Test
    public void testGetShaderSet2() {
        PBRMaterial pbrMaterial = new PBRMaterial();
        pbrMaterial.setAlphaBlend(true);
        assertTrue(pbrMaterial.getShaderSet() instanceof PBRMaterial.StandardShaderSet);
    }

    @Test
    public void testGetFragmentTextures() {
        PBRMaterial pbrMaterial = new PBRMaterial();
        SampledTexture[] actualFragmentTextures = pbrMaterial.getFragmentTextures();
        assertSame(pbrMaterial.mFragmentTextures, actualFragmentTextures);
        assertEquals(0, actualFragmentTextures.length);
        assertSame(actualFragmentTextures, pbrMaterial.mFragmentTextures);
    }

    @Test
    public void testGetFragmentTextures2() {
        PBRMaterial pbrMaterial = new PBRMaterial(new SampledTexture("Texture Name"));
        SampledTexture[] actualFragmentTextures = pbrMaterial.getFragmentTextures();
        assertSame(pbrMaterial.mFragmentTextures, actualFragmentTextures);
        assertEquals(1, actualFragmentTextures.length);
        assertSame(actualFragmentTextures, pbrMaterial.mFragmentTextures);
    }

    @Test
    public void testIncRefCount() {
        PBRMaterial pbrMaterial = new PBRMaterial();
        assertSame(pbrMaterial, pbrMaterial.incRefCount());
    }
}
