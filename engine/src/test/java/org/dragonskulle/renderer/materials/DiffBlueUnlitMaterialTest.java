/* (C) 2021 DragonSkulle */
package org.dragonskulle.renderer.materials;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import org.dragonskulle.renderer.BindingDescription;
import org.dragonskulle.renderer.SampledTexture;
import org.joml.Vector2i;
import org.joml.Vector4f;
import org.junit.Test;

// The below tests were generated by https://www.diffblue.com/

public class DiffBlueUnlitMaterialTest {
    @Test
    public void testConstructor() {
        UnlitMaterial actualUnlitMaterial = new UnlitMaterial();
        assertEquals(1.0f, actualUnlitMaterial.getAlpha(), 0.0f);
        assertEquals(1, actualUnlitMaterial.getFragmentTextures().length);
        Vector4f colour = actualUnlitMaterial.getColour();
        assertEquals(1.0f, colour.z(), 0.0f);
        assertEquals(1.0f, colour.y(), 0.0f);
        assertEquals(1.0f, colour.x(), 0.0f);
        assertEquals(1.0f, colour.w(), 0.0f);
    }

    @Test
    public void testConstructor2() {
        UnlitMaterial actualUnlitMaterial = new UnlitMaterial(new SampledTexture("Texture Name"));
        assertEquals(1.0f, actualUnlitMaterial.getAlpha(), 0.0f);
        assertEquals(1, actualUnlitMaterial.getFragmentTextures().length);
        Vector4f colour = actualUnlitMaterial.getColour();
        assertEquals(1.0f, colour.z(), 0.0f);
        assertEquals(1.0f, colour.y(), 0.0f);
        assertEquals(1.0f, colour.x(), 0.0f);
        assertEquals(1.0f, colour.w(), 0.0f);
    }

    @Test
    public void testConstructor3() {
        SampledTexture texture = new SampledTexture("Texture Name");
        UnlitMaterial actualUnlitMaterial = new UnlitMaterial(texture, new Vector4f(10.0f));
        assertEquals(10.0f, actualUnlitMaterial.getAlpha(), 0.0f);
        assertEquals(1, actualUnlitMaterial.getFragmentTextures().length);
        Vector4f colour = actualUnlitMaterial.getColour();
        assertEquals(10.0f, colour.z(), 0.0f);
        assertEquals(10.0f, colour.y(), 0.0f);
        assertEquals(10.0f, colour.x(), 0.0f);
        assertEquals(10.0f, colour.w(), 0.0f);
    }

    @Test
    public void testConstructor4() {
        UnlitMaterial actualUnlitMaterial = new UnlitMaterial(new Vector4f(10.0f));
        assertEquals(10.0f, actualUnlitMaterial.getAlpha(), 0.0f);
        assertEquals(1, actualUnlitMaterial.getFragmentTextures().length);
        Vector4f colour = actualUnlitMaterial.getColour();
        assertEquals(10.0f, colour.z(), 0.0f);
        assertEquals(10.0f, colour.y(), 0.0f);
        assertEquals(10.0f, colour.x(), 0.0f);
        assertEquals(10.0f, colour.w(), 0.0f);
    }

    @Test
    public void testConstructor5() {
        Vector4f vector4f = new Vector4f(new Vector2i(1), 10.0f, 10.0f);
        vector4f.add(new Vector4f(10.0f));
        UnlitMaterial actualUnlitMaterial = new UnlitMaterial(vector4f);
        assertEquals(20.0f, actualUnlitMaterial.getAlpha(), 0.0f);
        assertEquals(1, actualUnlitMaterial.getFragmentTextures().length);
        Vector4f colour = actualUnlitMaterial.getColour();
        assertEquals(20.0f, colour.z(), 0.0f);
        assertEquals(11.0f, colour.y(), 0.0f);
        assertEquals(11.0f, colour.x(), 0.0f);
        assertEquals(20.0f, colour.w(), 0.0f);
    }

    @Test
    public void testGetShaderSet() {
        assertTrue((new UnlitMaterial()).getShaderSet() instanceof UnlitMaterial.UnlitShaderSet);
        assertTrue(
                (new UnlitMaterial(new Vector4f(-1.0f))).getShaderSet()
                        instanceof UnlitMaterial.UnlitShaderSet);
    }

    @Test
    public void testIncRefCount() {
        UnlitMaterial unlitMaterial = new UnlitMaterial();
        assertSame(unlitMaterial, unlitMaterial.incRefCount());
    }

    @Test
    public void testUnlitShaderSetConstructor() {
        UnlitMaterial.UnlitShaderSet actualUnlitShaderSet = new UnlitMaterial.UnlitShaderSet();
        assertEquals(0, actualUnlitShaderSet.getFragmentPushConstantSize());
        assertFalse(actualUnlitShaderSet.isVertexUniformDataDirty());
        assertFalse(actualUnlitShaderSet.isPreSort());
        assertFalse(actualUnlitShaderSet.isGeometryUniformDataDirty());
        assertFalse(actualUnlitShaderSet.isFragmentUniformDataDirty());
        assertTrue(actualUnlitShaderSet.isDepthTest());
        assertFalse(actualUnlitShaderSet.isAlphaBlend());
        assertEquals(0, actualUnlitShaderSet.getVertexUniformDataSize());
        assertEquals(5, actualUnlitShaderSet.getVertexAttributeDescriptions().length);
        assertEquals(1000, actualUnlitShaderSet.getRenderOrder());
        assertEquals(0, actualUnlitShaderSet.getGeometryUniformDataSize());
        assertEquals(1, actualUnlitShaderSet.getNumFragmentTextures());
        assertEquals(0, actualUnlitShaderSet.getLightCount());
        assertEquals(0, actualUnlitShaderSet.getFragmentUniformDataSize());
        BindingDescription vertexBindingDescription =
                actualUnlitShaderSet.getVertexBindingDescription();
        assertEquals(1, vertexBindingDescription.mInputRate);
        assertEquals(1, vertexBindingDescription.mBindingId);
        assertEquals(80, vertexBindingDescription.mSize);
    }

    @Test
    public void testUnlitShaderSetEnableAlpha() {
        UnlitMaterial.UnlitShaderSet unlitShaderSet = new UnlitMaterial.UnlitShaderSet();
        UnlitMaterial.UnlitShaderSet actualEnableAlphaResult = unlitShaderSet.enableAlpha();
        assertSame(unlitShaderSet, actualEnableAlphaResult);
        assertTrue(actualEnableAlphaResult.isPreSort());
        assertTrue(actualEnableAlphaResult.isAlphaBlend());
        assertEquals(2000, actualEnableAlphaResult.getRenderOrder());
    }
}
