/* (C) 2021 DragonSkulle */
package org.dragonskulle.game.map;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.dragonskulle.game.building.Building;
import org.joml.Vector4f;
import org.junit.Test;

// The below tests were generated by https://www.diffblue.com/

public class DiffBlueMapEffectsTest {
    @Test
    public void testStandardHighlightTypeAsSelection() {
        assertTrue(
                MapEffects.StandardHighlightType.VALID.asSelection() instanceof org.joml.Vector4f);
        assertTrue(
                MapEffects.StandardHighlightType.INVALID.asSelection()
                        instanceof org.joml.Vector4f);
        assertTrue(
                MapEffects.StandardHighlightType.PLAIN.asSelection() instanceof org.joml.Vector4f);
        assertTrue(
                MapEffects.StandardHighlightType.ATTACK.asSelection() instanceof org.joml.Vector4f);
        assertTrue(
                MapEffects.StandardHighlightType.PLACE.asSelection() instanceof org.joml.Vector4f);
    }

    @Test
    public void testHighlightSelectionFromColour() {
        Vector4f actualHighlightSelectionFromColourResult =
                MapEffects.highlightSelectionFromColour(10.0f, 10.0f, 10.0f);
        assertEquals(10.0f, actualHighlightSelectionFromColourResult.z, 0.0f);
        assertEquals(10.0f, actualHighlightSelectionFromColourResult.y, 0.0f);
        assertEquals(10.0f, actualHighlightSelectionFromColourResult.x, 0.0f);
        assertEquals(0.25f, actualHighlightSelectionFromColourResult.w, 0.0f);
    }

    @Test
    public void testHighlightSelectionFromColour2() {
        Vector4f actualHighlightSelectionFromColourResult =
                MapEffects.highlightSelectionFromColour(10.0f, 10.0f, 10.0f, 10.0f);
        assertEquals(10.0f, actualHighlightSelectionFromColourResult.z, 0.0f);
        assertEquals(10.0f, actualHighlightSelectionFromColourResult.y, 0.0f);
        assertEquals(10.0f, actualHighlightSelectionFromColourResult.x, 0.0f);
        assertEquals(10.0f, actualHighlightSelectionFromColourResult.w, 0.0f);
    }

    @Test
    public void testHighlightTile() {
        MapEffects mapEffects = new MapEffects();
        Vector4f highlightSelectionFromColourResult =
                MapEffects.highlightSelectionFromColour(10.0f, 10.0f, 10.0f, 10.0f);
        mapEffects.highlightTile(null, highlightSelectionFromColourResult);
        assertEquals(10.0f, highlightSelectionFromColourResult.z, 0.0f);
        assertEquals(10.0f, highlightSelectionFromColourResult.y, 0.0f);
        assertEquals(10.0f, highlightSelectionFromColourResult.x, 0.0f);
        assertEquals(10.0f, highlightSelectionFromColourResult.w, 0.0f);
        assertFalse(mapEffects.isStarted());
        assertTrue(mapEffects.isEnabled());
        assertTrue(mapEffects.isDefaultHighlight());
        assertFalse(mapEffects.isAwake());
    }

    @Test
    public void testLateFrameUpdate() {
        MapEffects mapEffects = new MapEffects();
        mapEffects.lateFrameUpdate(0.5f);
        assertFalse(mapEffects.isStarted());
        assertTrue(mapEffects.isEnabled());
        assertTrue(mapEffects.isDefaultHighlight());
        assertFalse(mapEffects.isAwake());
    }

    @Test
    public void testOnDestroy() {
        MapEffects mapEffects = new MapEffects();
        mapEffects.onDestroy();
        assertFalse(mapEffects.isStarted());
        assertTrue(mapEffects.isEnabled());
        assertTrue(mapEffects.isDefaultHighlight());
        assertFalse(mapEffects.isAwake());
    }

    @Test
    public void testPulseHighlight2() {
        MapEffects mapEffects = new MapEffects();
        Vector4f highlightSelectionFromColourResult =
                MapEffects.highlightSelectionFromColour(10.0f, 10.0f, 10.0f, 10.0f);
        mapEffects.pulseHighlight(
                (Building) null, highlightSelectionFromColourResult, 10.0f, 10.0f, 10.0f);
        assertEquals(10.0f, highlightSelectionFromColourResult.z, 0.0f);
        assertEquals(10.0f, highlightSelectionFromColourResult.y, 0.0f);
        assertEquals(10.0f, highlightSelectionFromColourResult.x, 0.0f);
        assertEquals(10.0f, highlightSelectionFromColourResult.w, 0.0f);
        assertFalse(mapEffects.isStarted());
        assertTrue(mapEffects.isEnabled());
        assertTrue(mapEffects.isDefaultHighlight());
        assertFalse(mapEffects.isAwake());
    }

    @Test
    public void testPulseHighlight3() {
        MapEffects mapEffects = new MapEffects();
        Vector4f highlightSelectionFromColourResult =
                MapEffects.highlightSelectionFromColour(10.0f, 10.0f, 10.0f, 10.0f);
        mapEffects.pulseHighlight(
                (HexagonTile) null, highlightSelectionFromColourResult, 10.0f, 10.0f, 10.0f);
        assertEquals(10.0f, highlightSelectionFromColourResult.z, 0.0f);
        assertEquals(10.0f, highlightSelectionFromColourResult.y, 0.0f);
        assertEquals(10.0f, highlightSelectionFromColourResult.x, 0.0f);
        assertEquals(10.0f, highlightSelectionFromColourResult.w, 0.0f);
        assertFalse(mapEffects.isStarted());
        assertTrue(mapEffects.isEnabled());
        assertTrue(mapEffects.isDefaultHighlight());
        assertFalse(mapEffects.isAwake());
    }

    @Test
    public void testUnhighlightAllTiles() {
        MapEffects mapEffects = new MapEffects();
        mapEffects.unhighlightAllTiles();
        assertFalse(mapEffects.isStarted());
        assertTrue(mapEffects.isEnabled());
        assertTrue(mapEffects.isDefaultHighlight());
        assertFalse(mapEffects.isAwake());
    }

    @Test
    public void testUnhighlightTile() {
        MapEffects mapEffects = new MapEffects();
        mapEffects.unhighlightTile(null);
        assertFalse(mapEffects.isStarted());
        assertTrue(mapEffects.isEnabled());
        assertTrue(mapEffects.isDefaultHighlight());
        assertFalse(mapEffects.isAwake());
    }
}
