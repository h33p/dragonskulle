/* (C) 2021 DragonSkulle */
package org.dragonskulle.game.player;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import org.dragonskulle.core.GameObject;
import org.dragonskulle.core.Reference;
import org.dragonskulle.core.TemplateManager;
import org.dragonskulle.game.player.ui.Screen;
import org.dragonskulle.game.player.ui.UILinkedScrollBar;
import org.dragonskulle.game.player.ui.UIMenuLeftDrawer;
import org.dragonskulle.network.components.NetworkManager;
import org.junit.Test;

// The below tests were generated by https://www.diffblue.com/

public class HumanPlayerTest {
    @Test
    public void testConstructor() {
        HumanPlayer actualHumanPlayer =
                new HumanPlayer(
                        new Reference<NetworkManager>(
                                new NetworkManager(new TemplateManager(), null)));
        assertFalse(actualHumanPlayer.isStarted());
        assertTrue(actualHumanPlayer.isEnabled());
        assertFalse(actualHumanPlayer.isAwake());
        assertEquals(Screen.DEFAULT_SCREEN, actualHumanPlayer.getCurrentScreen());
        assertSame(actualHumanPlayer, actualHumanPlayer.getReference().get());
    }

    @Test
    public void testConstructor2() {
        HumanPlayer actualHumanPlayer =
                new HumanPlayer(new Reference<NetworkManager>(new NetworkManager(null, null)));
        assertFalse(actualHumanPlayer.isStarted());
        assertTrue(actualHumanPlayer.isEnabled());
        assertFalse(actualHumanPlayer.isAwake());
        assertEquals(Screen.DEFAULT_SCREEN, actualHumanPlayer.getCurrentScreen());
        assertSame(actualHumanPlayer, actualHumanPlayer.getReference().get());
    }

    @Test
    public void testOnStart() {
        HumanPlayer humanPlayer =
                new HumanPlayer(
                        new Reference<NetworkManager>(
                                new NetworkManager(new TemplateManager(), null)));
        humanPlayer.setGameObject(new GameObject("Name"));
        humanPlayer.onStart();
        Reference<UIMenuLeftDrawer> menuDrawer = humanPlayer.getMenuDrawer();
        UIMenuLeftDrawer getResult = menuDrawer.get();
        assertNull(getResult.getLastScreen());
        assertFalse(getResult.isAwake());
        assertFalse(getResult.isStarted());
        Reference<UILinkedScrollBar> scrollBar = humanPlayer.getScrollBar();
        UILinkedScrollBar getResult1 = scrollBar.get();
        assertFalse(getResult1.isAwake());
        assertTrue(getResult1.isEnabled());
        assertTrue(getResult.isEnabled());
        assertSame(menuDrawer, getResult.getReference());
        assertFalse(getResult1.isStarted());
        assertSame(scrollBar, getResult1.getReference());
    }

    @Test
    public void testOnDestroy() {
        HumanPlayer humanPlayer =
                new HumanPlayer(
                        new Reference<NetworkManager>(
                                new NetworkManager(new TemplateManager(), null)));
        humanPlayer.onDestroy();
        assertFalse(humanPlayer.isStarted());
        assertTrue(humanPlayer.isEnabled());
        assertFalse(humanPlayer.isAwake());
        assertEquals(Screen.DEFAULT_SCREEN, humanPlayer.getCurrentScreen());
    }

    @Test
    public void testFixedUpdate() {
        HumanPlayer humanPlayer =
                new HumanPlayer(
                        new Reference<NetworkManager>(
                                new NetworkManager(new TemplateManager(), null)));
        humanPlayer.fixedUpdate(0.5f);
        assertFalse(humanPlayer.isStarted());
        assertTrue(humanPlayer.isEnabled());
        assertFalse(humanPlayer.isAwake());
        assertEquals(Screen.DEFAULT_SCREEN, humanPlayer.getCurrentScreen());
    }

    @Test
    public void testFixedUpdate2() {
        HumanPlayer humanPlayer = new HumanPlayer(new Reference<NetworkManager>(null));
        humanPlayer.fixedUpdate(0.5f);
        assertFalse(humanPlayer.isStarted());
        assertTrue(humanPlayer.isEnabled());
        assertFalse(humanPlayer.isAwake());
        assertEquals(Screen.DEFAULT_SCREEN, humanPlayer.getCurrentScreen());
    }

    @Test
    public void testFixedUpdate3() {
        NetworkManager networkManager = new NetworkManager(new TemplateManager(), null);
        networkManager.createClient("127.0.0.1", 8080, null, null, null);
        HumanPlayer humanPlayer = new HumanPlayer(new Reference<NetworkManager>(networkManager));
        humanPlayer.fixedUpdate(0.5f);
        assertFalse(humanPlayer.isStarted());
        assertTrue(humanPlayer.isEnabled());
        assertFalse(humanPlayer.isAwake());
        assertEquals(Screen.DEFAULT_SCREEN, humanPlayer.getCurrentScreen());
    }

    @Test
    public void testFrameUpdate() {
        HumanPlayer humanPlayer =
                new HumanPlayer(
                        new Reference<NetworkManager>(
                                new NetworkManager(new TemplateManager(), null)));
        humanPlayer.frameUpdate(0.5f);
        assertFalse(humanPlayer.isStarted());
        assertTrue(humanPlayer.isEnabled());
        assertFalse(humanPlayer.isAwake());
        assertEquals(Screen.DEFAULT_SCREEN, humanPlayer.getCurrentScreen());
    }

    @Test
    public void testFrameUpdate2() {
        HumanPlayer humanPlayer = new HumanPlayer(new Reference<NetworkManager>(null));
        humanPlayer.frameUpdate(0.5f);
        assertFalse(humanPlayer.isStarted());
        assertTrue(humanPlayer.isEnabled());
        assertFalse(humanPlayer.isAwake());
        assertEquals(Screen.DEFAULT_SCREEN, humanPlayer.getCurrentScreen());
    }

    @Test
    public void testSwitchScreen() {
        HumanPlayer humanPlayer =
                new HumanPlayer(
                        new Reference<NetworkManager>(
                                new NetworkManager(new TemplateManager(), null)));
        humanPlayer.switchScreen(Screen.DEFAULT_SCREEN);
        assertFalse(humanPlayer.isStarted());
        assertTrue(humanPlayer.isEnabled());
        assertFalse(humanPlayer.isAwake());
        assertEquals(Screen.DEFAULT_SCREEN, humanPlayer.getCurrentScreen());
    }

    @Test
    public void testSwitchScreen2() {
        HumanPlayer humanPlayer =
                new HumanPlayer(
                        new Reference<NetworkManager>(
                                new NetworkManager(new TemplateManager(), null)));
        humanPlayer.switchScreen(Screen.BUILDING_SELECTED_SCREEN);
        assertEquals(Screen.BUILDING_SELECTED_SCREEN, humanPlayer.getCurrentScreen());
    }
}
