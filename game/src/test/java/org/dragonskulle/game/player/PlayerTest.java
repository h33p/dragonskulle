/* (C) 2021 DragonSkulle */
package org.dragonskulle.game.player;

import static org.dragonskulle.game.lobby.Lobby.MAX_PLAYERS;
import static org.dragonskulle.network.testing.NetworkedTestContext.TIMEOUT;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.dragonskulle.game.App;
import org.dragonskulle.game.AppTest;
import org.dragonskulle.game.building.Building;
import org.dragonskulle.network.components.ClientNetworkManager;
import org.dragonskulle.network.testing.NetworkedTestContext;
import org.junit.Test;

/** Unit test for player things. */
public class PlayerTest {
    /** This test performs a simple check whether a player spawns within timeout (1 second). */
    @Test
    public void testPlayerSpawns() {
        App app = new App();
        NetworkedTestContext ctx = AppTest.buildTestContext(app);

        // This is an array, because it gets modified within the future.
        // This value will stay null even after calling waitPlayerSpawn,
        // because the futures are only executed on ctx.execute() line.
        Player[] myPlayer = {null};

        waitPlayerSpawn(ctx, myPlayer);

        ctx.execute();
    }

    private void waitPlayerSpawn(NetworkedTestContext ctx, Player[] myPlayer) {
        for (int i = 0; i < myPlayer.length; i++) {
            final int ii = i;

            ctx.getClient()
                    .awaitTimeout(
                            TIMEOUT,
                            (__) -> {
                                ClientNetworkManager clientMan = ctx.getClientManager();
                                myPlayer[ii] =
                                        clientMan
                                                .getIdSingletons(clientMan.getNetId())
                                                .get(Player.class);
                                return myPlayer[ii] != null;
                            });
        }
    }

    /**
     * This test performs a simple check whether a player spawns with a capital within timeout (1
     * second).
     */
    @Test
    public void testCapitalSpawns() {
        App app = new App();
        NetworkedTestContext ctx = AppTest.buildTestContext(app);

        Player[] myPlayer = {null};

        waitPlayerSpawn(ctx, myPlayer);
        ctx.getClient()
                .awaitTimeout(TIMEOUT, (__) -> myPlayer[0].getCapital() != null)
                .then((__) -> assertFalse(myPlayer[0].gameEnd()));

        ctx.execute();
    }

    /**
     * This test performs a check that the game does not end if game is filled up with max players,
     * and one player joins with significantly lower latency.
     */
    @Test
    public void testDelayedPlayersNotEndGame() {
        App app = new App();
        NetworkedTestContext ctx =
                AppTest.buildTestContext(MAX_PLAYERS, app, (id) -> id == 0 ? 0 : 0.8f);

        Player[] myPlayer = new Player[MAX_PLAYERS];

        waitPlayerSpawn(ctx, myPlayer);
        for (int i = 0; i < MAX_PLAYERS; i++) {
            int ii = i;
            ctx.getClient()
                    .awaitTimeout(TIMEOUT, (__) -> myPlayer[ii].getCapital() != null)
                    .then((__) -> assertFalse(myPlayer[ii].gameEnd()));
        }

        ctx.execute();
    }

    // The below tests were generated by https://www.diffblue.com/
    @Test
    public void testRemoveOwnership() {
        Player player = new Player();
        assertFalse(player.removeOwnership(new Building()));
    }

    @Test
    public void testAttackCheck() {
        Player player = new Player();
        Building attacker = new Building();
        assertFalse(player.attackCheck(attacker, new Building()));
    }

    @Test
    public void testAttackCheck2() {
        Player player = new Player();
        assertFalse(player.attackCheck(null, new Building()));
    }

    @Test
    public void testAttackCheck3() {
        Player player = new Player();
        assertFalse(player.attackCheck(new Building(), null));
    }

    @Test
    public void testAttackCheck4() {
        Player player = new Player();
        player.setOwnsCapital(false);
        Building attacker = new Building();
        assertFalse(player.attackCheck(attacker, new Building()));
    }

    @Test
    public void testStatCheck2() {
        Player player = new Player();
        assertFalse(player.statCheck(new Building(), null));
    }

    @Test
    public void testHasLost() {
        assertFalse((new Player()).hasLost());
    }

    @Test
    public void testHasLost2() {
        Player player = new Player();
        player.setOwnsCapital(false);
        assertTrue(player.hasLost());
    }

    @Test
    public void testGameEnd() {
        assertFalse((new Player()).gameEnd());
    }

    @Test
    public void testGameEnd2() {
        Player player = new Player();
        player.setOwnsCapital(false);
        assertTrue(player.gameEnd());
    }

    @Test
    public void testSetOwnsCapital() {
        Player player = new Player();
        player.setOwnsCapital(true);
        assertFalse(player.hasLost());
    }
}
