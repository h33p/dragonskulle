/* (C) 2021 DragonSkulle */
package org.dragonskulle.game.player;

import static org.dragonskulle.network.testing.NetworkedTestContext.TIMEOUT;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import org.dragonskulle.game.App;
import org.dragonskulle.game.AppTest;
import org.dragonskulle.game.building.Building;
import org.dragonskulle.game.building.stat.StatType;
import org.dragonskulle.game.player.network_data.AttackData;
import org.dragonskulle.network.components.ClientNetworkManager;
import org.dragonskulle.network.testing.NetworkedTestContext;
import org.junit.Test;

/** Unit test for player things. */
public class PlayerTest {
    /** This test performs a simple check whether a player spawns within timeout (1 second). */
    @Test
    public void testPlayerSpawns() {
        App app = new App();
        NetworkedTestContext ctx = AppTest.buildTestContext(app);

        // This is an array, because it gets modified within the future.
        // This value will stay null even after calling waitPlayerSpawn,
        // because the futures are only executed on ctx.execute() line.
        Player[] myPlayer = {null};

        waitPlayerSpawn(ctx, myPlayer);

        ctx.execute();
    }

    private void waitPlayerSpawn(NetworkedTestContext ctx, Player[] myPlayer) {
        ctx.getClient()
                .awaitTimeout(
                        TIMEOUT,
                        (__) -> {
                            ClientNetworkManager clientMan = ctx.getClientManager();
                            myPlayer[0] =
                                    clientMan
                                            .getIdSingletons(clientMan.getNetId())
                                            .get(Player.class);
                            return myPlayer[0] != null;
                        });
    }

    /**
     * This test performs a simple check whether a player spawns with a capital within timeout (1
     * second).
     */
    @Test
    public void testCapitalSpawns() {
        App app = new App();
        NetworkedTestContext ctx = AppTest.buildTestContext(app);

        Player[] myPlayer = {null};

        waitPlayerSpawn(ctx, myPlayer);
        ctx.getClient().awaitTimeout(TIMEOUT, (__) -> myPlayer[0].getCapital() != null);

        ctx.execute();
    }

    // The below tests were generated by https://www.diffblue.com/
    @Test
    public void testConstructor() {
        Player actualPlayer = new Player();
        assertNull(actualPlayer.getCapital());
        assertFalse(actualPlayer.isStarted());
        assertTrue(actualPlayer.isEnabled());
        assertFalse(actualPlayer.isAwake());
        assertFalse(actualPlayer.hasLost());
        assertNull(actualPlayer.getNetworkManager());
        assertEquals(0, actualPlayer.getNumberOfOwnedBuildings());
        assertNull(actualPlayer.getMap());
        assertTrue(actualPlayer.getPlayerColour().get() instanceof org.joml.Vector3f);
        assertSame(actualPlayer, actualPlayer.getReference().get());
        assertEquals(0, actualPlayer.getTokens().get());
    }

    @Test
    public void testUpdateViewableTiles() {
        Player player = new Player();
        Building building = new Building();
        player.updateViewableTiles(building);
        assertFalse(building.isStarted());
        assertEquals(2, building.getSellPrice());
        assertEquals(0, building.getStatBaseCost());
        assertEquals(0, building.getStatUpdateCount());
        assertTrue(building.isEnabled());
        assertFalse(building.isAwake());
    }

    @Test
    public void testFixedUpdate() {
        Player player = new Player();
        player.setOwnsCapital(false);
        player.addOwnership(new Building());
        player.fixedUpdate(0.5f);
        assertFalse(player.isStarted());
        assertTrue(player.isEnabled());
        assertFalse(player.isAwake());
    }

    @Test
    public void testOnDestroy() {
        Player player = new Player();
        player.onDestroy();
        assertFalse(player.isStarted());
        assertTrue(player.isEnabled());
        assertFalse(player.isAwake());
        assertFalse(player.hasLost());
    }

    @Test
    public void testAddOwnership() {
        Player player = new Player();
        Building building = new Building();
        player.addOwnership(building);
        assertFalse(building.isStarted());
        assertEquals(2, building.getSellPrice());
        assertEquals(0, building.getStatBaseCost());
        assertEquals(0, building.getStatUpdateCount());
        assertTrue(building.isEnabled());
        assertFalse(building.isAwake());
    }

    @Test
    public void testAddOwnership2() {
        Player player = new Player();
        player.addOwnership(null);
        assertFalse(player.isStarted());
        assertTrue(player.isEnabled());
        assertFalse(player.isAwake());
        assertFalse(player.hasLost());
    }

    @Test
    public void testRemoveOwnership() {
        Player player = new Player();
        assertFalse(player.removeOwnership(new Building()));
    }

    @Test
    public void testRemoveOwnership2() {
        assertFalse((new Player()).removeOwnership(null));
    }

    @Test
    public void testIsTileViewable() {
        assertFalse((new Player()).isTileViewable(null));
    }

    @Test
    public void testGetTileViewability() {
        assertEquals(-5, (new Player()).getTileViewability(null));
    }

    @Test
    public void testGetOwnedBuilding() {
        assertNull((new Player()).getOwnedBuilding(null));
    }

    @Test
    public void testGetOwnedBuildings() {
        assertTrue((new Player()).getOwnedBuildings().isEmpty());
    }

    @Test
    public void testGetNumberOfOwnedBuildings() {
        assertEquals(0, (new Player()).getNumberOfOwnedBuildings());
    }

    @Test
    public void testIsBuildingOwner() {
        assertFalse((new Player()).isBuildingOwner(null));
    }

    @Test
    public void testGetMap() {
        assertNull((new Player()).getMap());
    }

    @Test
    public void testAttackEffect() {
        Player player = new Player();
        player.attackEffect(new AttackData());
        assertFalse(player.isStarted());
        assertTrue(player.isEnabled());
        assertFalse(player.isAwake());
        assertFalse(player.hasLost());
    }

    @Test
    public void testAttackCheck() {
        Player player = new Player();
        Building attacker = new Building();
        assertFalse(player.attackCheck(attacker, new Building()));
    }

    @Test
    public void testAttackCheck2() {
        Player player = new Player();
        assertFalse(player.attackCheck(null, new Building()));
    }

    @Test
    public void testAttackCheck3() {
        Player player = new Player();
        assertFalse(player.attackCheck(new Building(), null));
    }

    @Test
    public void testAttackCheck4() {
        Player player = new Player();
        player.setOwnsCapital(false);
        Building attacker = new Building();
        assertFalse(player.attackCheck(attacker, new Building()));
    }

    @Test
    public void testSellCheck() {
        assertFalse((new Player()).sellCheck(null));
    }

    @Test
    public void testStatCheck() {
        assertFalse((new Player()).statCheck(null, StatType.ATTACK));
    }

    @Test
    public void testStatCheck2() {
        Player player = new Player();
        assertFalse(player.statCheck(new Building(), null));
    }

    @Test
    public void testHasLost() {
        assertFalse((new Player()).hasLost());
    }

    @Test
    public void testHasLost2() {
        Player player = new Player();
        player.setOwnsCapital(false);
        assertTrue(player.hasLost());
    }

    @Test
    public void testGameEnd() {
        assertFalse((new Player()).gameEnd());
    }

    @Test
    public void testGameEnd2() {
        Player player = new Player();
        player.setOwnsCapital(false);
        assertTrue(player.gameEnd());
    }

    @Test
    public void testSetOwnsCapital() {
        Player player = new Player();
        player.setOwnsCapital(true);
        assertFalse(player.hasLost());
    }

    @Test
    public void testGetCapital() {
        assertNull((new Player()).getCapital());
    }

    @Test
    public void testGetCapital2() {
        Player player = new Player();
        player.setOwnsCapital(false);
        assertNull(player.getCapital());
    }
}
