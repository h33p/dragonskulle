/* (C) 2021 DragonSkulle */
package org.dragonskulle.game.materials;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import org.dragonskulle.renderer.BindingDescription;
import org.dragonskulle.renderer.SampledTexture;
import org.joml.Vector2i;
import org.joml.Vector4f;
import org.junit.Test;

// The below tests were generated by https://www.diffblue.com/

public class VertexHighlightMaterialTest {
    @Test
    public void testConstructor() {
        VertexHighlightMaterial actualVertexHighlightMaterial = new VertexHighlightMaterial();
        assertEquals(0.5f, actualVertexHighlightMaterial.getAlpha(), 0.0f);
        assertEquals(1.0f, actualVertexHighlightMaterial.getVertexDistance(), 0.0f);
        assertEquals(1, actualVertexHighlightMaterial.getFragmentTextures().length);
        assertEquals(80.0f, actualVertexHighlightMaterial.getDistancePow(), 0.0f);
        Vector4f texColour = actualVertexHighlightMaterial.getTexColour();
        assertEquals(1.0f, texColour.w(), 0.0f);
        assertEquals(1.0f, texColour.z, 0.0f);
        assertEquals(1.0f, texColour.x(), 0.0f);
        Vector4f colour = actualVertexHighlightMaterial.getColour();
        assertEquals(0.5f, colour.z(), 0.0f);
        assertEquals(0.5f, colour.y(), 0.0f);
        assertEquals(0.5f, colour.w(), 0.0f);
        assertEquals(0.5f, colour.x(), 0.0f);
        assertEquals(1.0f, texColour.z(), 0.0f);
        assertEquals(1.0f, texColour.y(), 0.0f);
    }

    @Test
    public void testConstructor2() {
        VertexHighlightMaterial actualVertexHighlightMaterial =
                new VertexHighlightMaterial(new SampledTexture("Texture Name"));
        assertEquals(0.5f, actualVertexHighlightMaterial.getAlpha(), 0.0f);
        assertEquals(1.0f, actualVertexHighlightMaterial.getVertexDistance(), 0.0f);
        assertEquals(1, actualVertexHighlightMaterial.getFragmentTextures().length);
        assertEquals(80.0f, actualVertexHighlightMaterial.getDistancePow(), 0.0f);
        Vector4f texColour = actualVertexHighlightMaterial.getTexColour();
        assertEquals(1.0f, texColour.w(), 0.0f);
        assertEquals(1.0f, texColour.z, 0.0f);
        assertEquals(1.0f, texColour.x(), 0.0f);
        Vector4f colour = actualVertexHighlightMaterial.getColour();
        assertEquals(0.5f, colour.z(), 0.0f);
        assertEquals(0.5f, colour.y(), 0.0f);
        assertEquals(0.5f, colour.w(), 0.0f);
        assertEquals(0.5f, colour.x(), 0.0f);
        assertEquals(1.0f, texColour.z(), 0.0f);
        assertEquals(1.0f, texColour.y(), 0.0f);
    }

    @Test
    public void testConstructor3() {
        SampledTexture texture = new SampledTexture("Texture Name");
        VertexHighlightMaterial actualVertexHighlightMaterial =
                new VertexHighlightMaterial(texture, new Vector4f(10.0f));
        assertEquals(10.0f, actualVertexHighlightMaterial.getAlpha(), 0.0f);
        assertEquals(1.0f, actualVertexHighlightMaterial.getVertexDistance(), 0.0f);
        assertEquals(1, actualVertexHighlightMaterial.getFragmentTextures().length);
        assertEquals(80.0f, actualVertexHighlightMaterial.getDistancePow(), 0.0f);
        Vector4f texColour = actualVertexHighlightMaterial.getTexColour();
        assertEquals(1.0f, texColour.w(), 0.0f);
        assertEquals(1.0f, texColour.z, 0.0f);
        assertEquals(1.0f, texColour.x(), 0.0f);
        Vector4f colour = actualVertexHighlightMaterial.getColour();
        assertEquals(10.0f, colour.z(), 0.0f);
        assertEquals(10.0f, colour.y(), 0.0f);
        assertEquals(10.0f, colour.w(), 0.0f);
        assertEquals(10.0f, colour.x(), 0.0f);
        assertEquals(1.0f, texColour.z(), 0.0f);
        assertEquals(1.0f, texColour.y(), 0.0f);
    }

    @Test
    public void testConstructor4() {
        VertexHighlightMaterial actualVertexHighlightMaterial =
                new VertexHighlightMaterial(new Vector4f(10.0f));
        assertEquals(10.0f, actualVertexHighlightMaterial.getAlpha(), 0.0f);
        assertEquals(1.0f, actualVertexHighlightMaterial.getVertexDistance(), 0.0f);
        assertEquals(1, actualVertexHighlightMaterial.getFragmentTextures().length);
        assertEquals(80.0f, actualVertexHighlightMaterial.getDistancePow(), 0.0f);
        Vector4f texColour = actualVertexHighlightMaterial.getTexColour();
        assertEquals(1.0f, texColour.w(), 0.0f);
        assertEquals(1.0f, texColour.z, 0.0f);
        assertEquals(1.0f, texColour.x(), 0.0f);
        Vector4f colour = actualVertexHighlightMaterial.getColour();
        assertEquals(10.0f, colour.z(), 0.0f);
        assertEquals(10.0f, colour.y(), 0.0f);
        assertEquals(10.0f, colour.w(), 0.0f);
        assertEquals(10.0f, colour.x(), 0.0f);
        assertEquals(1.0f, texColour.z(), 0.0f);
        assertEquals(1.0f, texColour.y(), 0.0f);
    }

    @Test
    public void testConstructor5() {
        Vector4f vector4f = new Vector4f(new Vector2i(1), 10.0f, 10.0f);
        vector4f.add(new Vector4f(10.0f));
        VertexHighlightMaterial actualVertexHighlightMaterial =
                new VertexHighlightMaterial(vector4f);
        assertEquals(20.0f, actualVertexHighlightMaterial.getAlpha(), 0.0f);
        assertEquals(1.0f, actualVertexHighlightMaterial.getVertexDistance(), 0.0f);
        assertEquals(1, actualVertexHighlightMaterial.getFragmentTextures().length);
        assertEquals(80.0f, actualVertexHighlightMaterial.getDistancePow(), 0.0f);
        Vector4f texColour = actualVertexHighlightMaterial.getTexColour();
        assertEquals(1.0f, texColour.w(), 0.0f);
        assertEquals(1.0f, texColour.z, 0.0f);
        assertEquals(1.0f, texColour.x(), 0.0f);
        Vector4f colour = actualVertexHighlightMaterial.getColour();
        assertEquals(20.0f, colour.z(), 0.0f);
        assertEquals(11.0f, colour.y(), 0.0f);
        assertEquals(20.0f, colour.w(), 0.0f);
        assertEquals(11.0f, colour.x(), 0.0f);
        assertEquals(1.0f, texColour.z(), 0.0f);
        assertEquals(1.0f, texColour.y(), 0.0f);
    }

    @Test
    public void testGetShaderSet() {
        assertTrue(
                (new VertexHighlightMaterial()).getShaderSet()
                        instanceof VertexHighlightMaterial.MatShaderSet);
    }

    @Test
    public void testIncRefCount() {
        VertexHighlightMaterial vertexHighlightMaterial = new VertexHighlightMaterial();
        assertSame(vertexHighlightMaterial, vertexHighlightMaterial.incRefCount());
    }

    @Test
    public void testMatShaderSetConstructor() {
        VertexHighlightMaterial.MatShaderSet actualMatShaderSet =
                new VertexHighlightMaterial.MatShaderSet();
        assertEquals(0, actualMatShaderSet.getFragmentPushConstantSize());
        assertFalse(actualMatShaderSet.isVertexUniformDataDirty());
        assertFalse(actualMatShaderSet.isPreSort());
        assertFalse(actualMatShaderSet.isGeometryUniformDataDirty());
        assertFalse(actualMatShaderSet.isFragmentUniformDataDirty());
        assertTrue(actualMatShaderSet.isDepthTest());
        assertFalse(actualMatShaderSet.isAlphaBlend());
        assertEquals(0, actualMatShaderSet.getVertexUniformDataSize());
        assertEquals(8, actualMatShaderSet.getVertexAttributeDescriptions().length);
        assertEquals(1000, actualMatShaderSet.getRenderOrder());
        assertEquals(0, actualMatShaderSet.getGeometryUniformDataSize());
        assertEquals(1, actualMatShaderSet.getNumFragmentTextures());
        assertEquals(0, actualMatShaderSet.getLightCount());
        assertEquals(0, actualMatShaderSet.getFragmentUniformDataSize());
        BindingDescription vertexBindingDescription =
                actualMatShaderSet.getVertexBindingDescription();
        assertEquals(1, vertexBindingDescription.mInputRate);
        assertEquals(1, vertexBindingDescription.mBindingId);
        assertEquals(104, vertexBindingDescription.mSize);
    }

    @Test
    public void testMatShaderSetEnableAlpha() {
        VertexHighlightMaterial.MatShaderSet matShaderSet =
                new VertexHighlightMaterial.MatShaderSet();
        VertexHighlightMaterial.MatShaderSet actualEnableAlphaResult = matShaderSet.enableAlpha();
        assertSame(matShaderSet, actualEnableAlphaResult);
        assertTrue(actualEnableAlphaResult.isPreSort());
        assertTrue(actualEnableAlphaResult.isAlphaBlend());
        assertEquals(2000, actualEnableAlphaResult.getRenderOrder());
    }
}
