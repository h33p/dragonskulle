/* (C) 2021 DragonSkulle */
package org.dragonskulle.game.materials;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import org.joml.Vector4f;
import org.junit.Test;

// The below tests were generated by https://www.diffblue.com/

public class DiffBlueHighlightControlsTest {
    @Test
    public void testConstructor() {
        HighlightControls actualHighlightControls = new HighlightControls();
        assertFalse(actualHighlightControls.isStarted());
        assertTrue(actualHighlightControls.isEnabled());
        assertFalse(actualHighlightControls.isAwake());
        Vector4f targetColour = actualHighlightControls.getTargetColour();
        assertEquals(0.0f, targetColour.z, 0.0f);
        assertSame(actualHighlightControls, actualHighlightControls.getReference().get());
        assertEquals(1.0f, targetColour.w(), 0.0f);
    }

    @Test
    public void testConstructor2() {
        HighlightControls actualHighlightControls = new HighlightControls("Child Name");
        assertFalse(actualHighlightControls.isStarted());
        assertTrue(actualHighlightControls.isEnabled());
        assertFalse(actualHighlightControls.isAwake());
        Vector4f targetColour = actualHighlightControls.getTargetColour();
        assertEquals(0.0f, targetColour.z, 0.0f);
        assertSame(actualHighlightControls, actualHighlightControls.getReference().get());
        assertEquals(1.0f, targetColour.w(), 0.0f);
    }

    @Test
    public void testSetHighlight() {
        HighlightControls highlightControls = new HighlightControls();
        highlightControls.setHighlight(10.0f, 10.0f, 10.0f, 10.0f);
        assertFalse(highlightControls.isStarted());
        assertTrue(highlightControls.isEnabled());
        assertFalse(highlightControls.isAwake());
    }

    @Test
    public void testSetHighlight2() {
        HighlightControls highlightControls = new HighlightControls();
        Vector4f vector4f = new Vector4f(10.0f);
        highlightControls.setHighlight(vector4f);
        assertEquals(10.0f, vector4f.z, 0.0f);
        assertEquals(10.0f, vector4f.y, 0.0f);
        assertEquals(10.0f, vector4f.x, 0.0f);
        assertEquals(10.0f, vector4f.w, 0.0f);
        assertFalse(highlightControls.isStarted());
        assertTrue(highlightControls.isEnabled());
        assertFalse(highlightControls.isAwake());
    }

    @Test
    public void testFrameUpdate() {
        HighlightControls highlightControls = new HighlightControls();
        highlightControls.frameUpdate(0.5f);
        assertFalse(highlightControls.isStarted());
        assertTrue(highlightControls.isEnabled());
        assertFalse(highlightControls.isAwake());
    }

    @Test
    public void testOnDestroy() {
        HighlightControls highlightControls = new HighlightControls();
        highlightControls.onDestroy();
        assertFalse(highlightControls.isStarted());
        assertTrue(highlightControls.isEnabled());
        assertFalse(highlightControls.isAwake());
    }
}
