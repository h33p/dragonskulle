/* (C) 2021 DragonSkulle */
package org.dragonskulle.game.materials;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import org.dragonskulle.renderer.BindingDescription;
import org.dragonskulle.renderer.SampledTexture;
import org.dragonskulle.renderer.materials.PBRMaterial;
import org.joml.Vector3f;
import org.joml.Vector4f;
import org.junit.Test;

// The below tests were generated by https://www.diffblue.com/

public class PBRHighlightMaterialTest {
    @Test
    public void testHashShaderSet() {
        assertEquals(0, (new PBRHighlightMaterial()).hashShaderSet());
    }

    @Test
    public void testConstructor() {
        PBRHighlightMaterial actualPbrHighlightMaterial = new PBRHighlightMaterial();
        assertFalse(actualPbrHighlightMaterial.isAlphaBlend());
        assertEquals(1.0f, actualPbrHighlightMaterial.getRoughness(), 0.0f);
        assertEquals(1.0f, actualPbrHighlightMaterial.getAlpha(), 0.0f);
        assertEquals(4.0f, actualPbrHighlightMaterial.getAlphaMul(), 0.0f);
        assertEquals(1.0f, actualPbrHighlightMaterial.getMetallic(), 0.0f);
        assertEquals(0.5f, actualPbrHighlightMaterial.getMinDist(), 0.0f);
        assertEquals(0.0f, actualPbrHighlightMaterial.getAlphaCutoff(), 0.0f);
        assertEquals(5.0f, actualPbrHighlightMaterial.getDistPow(), 0.0f);
        assertEquals(1.0f, actualPbrHighlightMaterial.getNormal(), 0.0f);
        Vector4f colour = actualPbrHighlightMaterial.getColour();
        assertEquals(1.0f, colour.x(), 0.0f);
        Vector3f emissionColour = actualPbrHighlightMaterial.getEmissionColour();
        assertEquals(0.0f, emissionColour.z, 0.0f);
        assertEquals(0.0f, emissionColour.y, 0.0f);
        assertEquals(0.0f, emissionColour.x, 0.0f);
        assertEquals(1.0f, colour.w(), 0.0f);
        Vector4f overlayColour = actualPbrHighlightMaterial.getOverlayColour();
        assertEquals(0.0f, overlayColour.y(), 0.0f);
        assertEquals(0.0f, overlayColour.x(), 0.0f);
        assertEquals(0.0f, overlayColour.w(), 0.0f);
        assertEquals(0.0f, overlayColour.y, 0.0f);
        assertEquals(0.0f, overlayColour.z(), 0.0f);
        assertEquals(1.0f, colour.z(), 0.0f);
        assertEquals(1.0f, colour.y(), 0.0f);
    }

    @Test
    public void testConstructor2() {
        SampledTexture sampledTexture = new SampledTexture("Texture Name");
        PBRHighlightMaterial actualPbrHighlightMaterial = new PBRHighlightMaterial(sampledTexture);
        assertSame(sampledTexture, actualPbrHighlightMaterial.getAlbedoMap());
        assertFalse(actualPbrHighlightMaterial.isAlphaBlend());
        assertEquals(1.0f, actualPbrHighlightMaterial.getAlpha(), 0.0f);
        assertEquals(4.0f, actualPbrHighlightMaterial.getAlphaMul(), 0.0f);
        assertEquals(1.0f, actualPbrHighlightMaterial.getRoughness(), 0.0f);
        assertEquals(1.0f, actualPbrHighlightMaterial.getMetallic(), 0.0f);
        assertEquals(0.5f, actualPbrHighlightMaterial.getMinDist(), 0.0f);
        assertEquals(0.0f, actualPbrHighlightMaterial.getAlphaCutoff(), 0.0f);
        assertEquals(5.0f, actualPbrHighlightMaterial.getDistPow(), 0.0f);
        assertEquals(1.0f, actualPbrHighlightMaterial.getNormal(), 0.0f);
        Vector4f colour = actualPbrHighlightMaterial.getColour();
        assertEquals(1.0f, colour.w(), 0.0f);
        Vector3f emissionColour = actualPbrHighlightMaterial.getEmissionColour();
        assertEquals(0.0f, emissionColour.z, 0.0f);
        assertEquals(0.0f, emissionColour.y, 0.0f);
        assertEquals(0.0f, emissionColour.x, 0.0f);
        Vector4f overlayColour = actualPbrHighlightMaterial.getOverlayColour();
        assertEquals(0.0f, overlayColour.x, 0.0f);
        assertEquals(0.0f, overlayColour.z(), 0.0f);
        assertEquals(0.0f, overlayColour.y(), 0.0f);
        assertEquals(0.0f, overlayColour.x(), 0.0f);
        assertEquals(0.0f, overlayColour.w(), 0.0f);
        assertEquals(1.0f, colour.z, 0.0f);
        assertEquals(1.0f, colour.x(), 0.0f);
        assertEquals(1.0f, colour.y(), 0.0f);
    }

    @Test
    public void testConstructor3() {
        SampledTexture sampledTexture = new SampledTexture("Texture Name");
        PBRHighlightMaterial actualPbrHighlightMaterial =
                new PBRHighlightMaterial(sampledTexture, new Vector4f(10.0f));
        assertSame(sampledTexture, actualPbrHighlightMaterial.getAlbedoMap());
        assertFalse(actualPbrHighlightMaterial.isAlphaBlend());
        assertEquals(10.0f, actualPbrHighlightMaterial.getAlpha(), 0.0f);
        assertEquals(4.0f, actualPbrHighlightMaterial.getAlphaMul(), 0.0f);
        assertEquals(1.0f, actualPbrHighlightMaterial.getRoughness(), 0.0f);
        assertEquals(1.0f, actualPbrHighlightMaterial.getMetallic(), 0.0f);
        assertEquals(0.5f, actualPbrHighlightMaterial.getMinDist(), 0.0f);
        assertEquals(0.0f, actualPbrHighlightMaterial.getAlphaCutoff(), 0.0f);
        assertEquals(5.0f, actualPbrHighlightMaterial.getDistPow(), 0.0f);
        assertEquals(1.0f, actualPbrHighlightMaterial.getNormal(), 0.0f);
        Vector4f colour = actualPbrHighlightMaterial.getColour();
        assertEquals(10.0f, colour.w(), 0.0f);
        Vector3f emissionColour = actualPbrHighlightMaterial.getEmissionColour();
        assertEquals(0.0f, emissionColour.z, 0.0f);
        assertEquals(0.0f, emissionColour.y, 0.0f);
        assertEquals(0.0f, emissionColour.x, 0.0f);
        Vector4f overlayColour = actualPbrHighlightMaterial.getOverlayColour();
        assertEquals(0.0f, overlayColour.x, 0.0f);
        assertEquals(0.0f, overlayColour.z(), 0.0f);
        assertEquals(0.0f, overlayColour.y(), 0.0f);
        assertEquals(0.0f, overlayColour.x(), 0.0f);
        assertEquals(0.0f, overlayColour.w(), 0.0f);
        assertEquals(10.0f, colour.z, 0.0f);
        assertEquals(10.0f, colour.x(), 0.0f);
        assertEquals(10.0f, colour.y(), 0.0f);
    }

    @Test
    public void testConstructor4() {
        PBRHighlightMaterial actualPbrHighlightMaterial =
                new PBRHighlightMaterial(new PBRMaterial());
        assertFalse(actualPbrHighlightMaterial.isAlphaBlend());
        assertEquals(1.0f, actualPbrHighlightMaterial.getRoughness(), 0.0f);
        assertEquals(1.0f, actualPbrHighlightMaterial.getAlpha(), 0.0f);
        assertEquals(4.0f, actualPbrHighlightMaterial.getAlphaMul(), 0.0f);
        assertEquals(1.0f, actualPbrHighlightMaterial.getMetallic(), 0.0f);
        assertEquals(0.5f, actualPbrHighlightMaterial.getMinDist(), 0.0f);
        assertEquals(0.0f, actualPbrHighlightMaterial.getAlphaCutoff(), 0.0f);
        assertEquals(5.0f, actualPbrHighlightMaterial.getDistPow(), 0.0f);
        assertEquals(1.0f, actualPbrHighlightMaterial.getNormal(), 0.0f);
        Vector4f colour = actualPbrHighlightMaterial.getColour();
        assertEquals(1.0f, colour.x(), 0.0f);
        Vector3f emissionColour = actualPbrHighlightMaterial.getEmissionColour();
        assertEquals(0.0f, emissionColour.z, 0.0f);
        assertEquals(0.0f, emissionColour.y, 0.0f);
        assertEquals(0.0f, emissionColour.x, 0.0f);
        assertEquals(1.0f, colour.w(), 0.0f);
        Vector4f overlayColour = actualPbrHighlightMaterial.getOverlayColour();
        assertEquals(0.0f, overlayColour.y(), 0.0f);
        assertEquals(0.0f, overlayColour.x(), 0.0f);
        assertEquals(0.0f, overlayColour.w(), 0.0f);
        assertEquals(0.0f, overlayColour.y, 0.0f);
        assertEquals(0.0f, overlayColour.z(), 0.0f);
        assertEquals(1.0f, colour.z(), 0.0f);
        assertEquals(1.0f, colour.y(), 0.0f);
    }

    @Test
    public void testConstructor5() {
        PBRMaterial pbrMaterial = new PBRMaterial();
        pbrMaterial.setAlphaBlend(true);
        PBRHighlightMaterial actualPbrHighlightMaterial = new PBRHighlightMaterial(pbrMaterial);
        assertTrue(actualPbrHighlightMaterial.isAlphaBlend());
        assertEquals(1.0f, actualPbrHighlightMaterial.getRoughness(), 0.0f);
        assertEquals(1.0f, actualPbrHighlightMaterial.getAlpha(), 0.0f);
        assertEquals(4.0f, actualPbrHighlightMaterial.getAlphaMul(), 0.0f);
        assertEquals(1.0f, actualPbrHighlightMaterial.getMetallic(), 0.0f);
        assertEquals(0.5f, actualPbrHighlightMaterial.getMinDist(), 0.0f);
        assertEquals(0.0f, actualPbrHighlightMaterial.getAlphaCutoff(), 0.0f);
        assertEquals(5.0f, actualPbrHighlightMaterial.getDistPow(), 0.0f);
        assertEquals(1.0f, actualPbrHighlightMaterial.getNormal(), 0.0f);
        Vector4f colour = actualPbrHighlightMaterial.getColour();
        assertEquals(1.0f, colour.x(), 0.0f);
        Vector3f emissionColour = actualPbrHighlightMaterial.getEmissionColour();
        assertEquals(0.0f, emissionColour.z, 0.0f);
        assertEquals(0.0f, emissionColour.y, 0.0f);
        assertEquals(0.0f, emissionColour.x, 0.0f);
        assertEquals(1.0f, colour.w(), 0.0f);
        Vector4f overlayColour = actualPbrHighlightMaterial.getOverlayColour();
        assertEquals(0.0f, overlayColour.y(), 0.0f);
        assertEquals(0.0f, overlayColour.x(), 0.0f);
        assertEquals(0.0f, overlayColour.w(), 0.0f);
        assertEquals(0.0f, overlayColour.y, 0.0f);
        assertEquals(0.0f, overlayColour.z(), 0.0f);
        assertEquals(1.0f, colour.z(), 0.0f);
        assertEquals(1.0f, colour.y(), 0.0f);
    }

    @Test
    public void testConstructor6() {
        PBRMaterial pbrMaterial = new PBRMaterial();
        pbrMaterial.setAlphaBlend(false);
        PBRHighlightMaterial actualPbrHighlightMaterial = new PBRHighlightMaterial(pbrMaterial);
        assertFalse(actualPbrHighlightMaterial.isAlphaBlend());
        assertEquals(1.0f, actualPbrHighlightMaterial.getRoughness(), 0.0f);
        assertEquals(1.0f, actualPbrHighlightMaterial.getAlpha(), 0.0f);
        assertEquals(4.0f, actualPbrHighlightMaterial.getAlphaMul(), 0.0f);
        assertEquals(1.0f, actualPbrHighlightMaterial.getMetallic(), 0.0f);
        assertEquals(0.5f, actualPbrHighlightMaterial.getMinDist(), 0.0f);
        assertEquals(0.0f, actualPbrHighlightMaterial.getAlphaCutoff(), 0.0f);
        assertEquals(5.0f, actualPbrHighlightMaterial.getDistPow(), 0.0f);
        assertEquals(1.0f, actualPbrHighlightMaterial.getNormal(), 0.0f);
        Vector4f colour = actualPbrHighlightMaterial.getColour();
        assertEquals(1.0f, colour.x(), 0.0f);
        Vector3f emissionColour = actualPbrHighlightMaterial.getEmissionColour();
        assertEquals(0.0f, emissionColour.z, 0.0f);
        assertEquals(0.0f, emissionColour.y, 0.0f);
        assertEquals(0.0f, emissionColour.x, 0.0f);
        assertEquals(1.0f, colour.w(), 0.0f);
        Vector4f overlayColour = actualPbrHighlightMaterial.getOverlayColour();
        assertEquals(0.0f, overlayColour.y(), 0.0f);
        assertEquals(0.0f, overlayColour.x(), 0.0f);
        assertEquals(0.0f, overlayColour.w(), 0.0f);
        assertEquals(0.0f, overlayColour.y, 0.0f);
        assertEquals(0.0f, overlayColour.z(), 0.0f);
        assertEquals(1.0f, colour.z(), 0.0f);
        assertEquals(1.0f, colour.y(), 0.0f);
    }

    @Test
    public void testConstructor7() {
        PBRHighlightMaterial actualPbrHighlightMaterial =
                new PBRHighlightMaterial(new Vector4f(10.0f));
        assertFalse(actualPbrHighlightMaterial.isAlphaBlend());
        assertEquals(1.0f, actualPbrHighlightMaterial.getRoughness(), 0.0f);
        assertEquals(10.0f, actualPbrHighlightMaterial.getAlpha(), 0.0f);
        assertEquals(4.0f, actualPbrHighlightMaterial.getAlphaMul(), 0.0f);
        assertEquals(1.0f, actualPbrHighlightMaterial.getMetallic(), 0.0f);
        assertEquals(0.5f, actualPbrHighlightMaterial.getMinDist(), 0.0f);
        assertEquals(0.0f, actualPbrHighlightMaterial.getAlphaCutoff(), 0.0f);
        assertEquals(5.0f, actualPbrHighlightMaterial.getDistPow(), 0.0f);
        assertEquals(1.0f, actualPbrHighlightMaterial.getNormal(), 0.0f);
        Vector4f colour = actualPbrHighlightMaterial.getColour();
        assertEquals(10.0f, colour.x(), 0.0f);
        Vector3f emissionColour = actualPbrHighlightMaterial.getEmissionColour();
        assertEquals(0.0f, emissionColour.z, 0.0f);
        assertEquals(0.0f, emissionColour.y, 0.0f);
        assertEquals(0.0f, emissionColour.x, 0.0f);
        assertEquals(10.0f, colour.w(), 0.0f);
        Vector4f overlayColour = actualPbrHighlightMaterial.getOverlayColour();
        assertEquals(0.0f, overlayColour.y(), 0.0f);
        assertEquals(0.0f, overlayColour.x(), 0.0f);
        assertEquals(0.0f, overlayColour.w(), 0.0f);
        assertEquals(0.0f, overlayColour.y, 0.0f);
        assertEquals(0.0f, overlayColour.z(), 0.0f);
        assertEquals(10.0f, colour.z(), 0.0f);
        assertEquals(10.0f, colour.y(), 0.0f);
    }

    @Test
    public void testHighlightShaderSetConstructor() {
        PBRHighlightMaterial.HighlightShaderSet actualHighlightShaderSet =
                new PBRHighlightMaterial.HighlightShaderSet(new PBRHighlightMaterial());
        assertEquals(0, actualHighlightShaderSet.getFragmentPushConstantSize());
        assertFalse(actualHighlightShaderSet.isVertexUniformDataDirty());
        assertFalse(actualHighlightShaderSet.isPreSort());
        assertFalse(actualHighlightShaderSet.isGeometryUniformDataDirty());
        assertFalse(actualHighlightShaderSet.isFragmentUniformDataDirty());
        assertTrue(actualHighlightShaderSet.isDepthTest());
        assertFalse(actualHighlightShaderSet.isAlphaBlend());
        assertEquals(0, actualHighlightShaderSet.getVertexUniformDataSize());
        assertEquals(19, actualHighlightShaderSet.getVertexAttributeDescriptions().length);
        assertEquals(1000, actualHighlightShaderSet.getRenderOrder());
        assertEquals(0, actualHighlightShaderSet.getGeometryUniformDataSize());
        assertEquals(0, actualHighlightShaderSet.getNumFragmentTextures());
        assertEquals(2, actualHighlightShaderSet.getLightCount());
        assertEquals(0, actualHighlightShaderSet.getFragmentUniformDataSize());
        BindingDescription vertexBindingDescription =
                actualHighlightShaderSet.getVertexBindingDescription();
        assertEquals(1, vertexBindingDescription.mInputRate);
        assertEquals(1, vertexBindingDescription.mBindingId);
        assertEquals(208, vertexBindingDescription.mSize);
    }

    @Test
    public void testHighlightShaderSetConstructor2() {
        PBRHighlightMaterial pbrHighlightMaterial = new PBRHighlightMaterial();
        pbrHighlightMaterial.setAlphaBlend(true);
        PBRHighlightMaterial.HighlightShaderSet actualHighlightShaderSet =
                new PBRHighlightMaterial.HighlightShaderSet(pbrHighlightMaterial);
        assertEquals(0, actualHighlightShaderSet.getFragmentPushConstantSize());
        assertFalse(actualHighlightShaderSet.isVertexUniformDataDirty());
        assertTrue(actualHighlightShaderSet.isPreSort());
        assertFalse(actualHighlightShaderSet.isGeometryUniformDataDirty());
        assertFalse(actualHighlightShaderSet.isFragmentUniformDataDirty());
        assertTrue(actualHighlightShaderSet.isDepthTest());
        assertTrue(actualHighlightShaderSet.isAlphaBlend());
        assertEquals(0, actualHighlightShaderSet.getVertexUniformDataSize());
        assertEquals(19, actualHighlightShaderSet.getVertexAttributeDescriptions().length);
        assertEquals(2000, actualHighlightShaderSet.getRenderOrder());
        assertEquals(0, actualHighlightShaderSet.getGeometryUniformDataSize());
        assertEquals(0, actualHighlightShaderSet.getNumFragmentTextures());
        assertEquals(2, actualHighlightShaderSet.getLightCount());
        assertEquals(0, actualHighlightShaderSet.getFragmentUniformDataSize());
        BindingDescription vertexBindingDescription =
                actualHighlightShaderSet.getVertexBindingDescription();
        assertEquals(1, vertexBindingDescription.mInputRate);
        assertEquals(1, vertexBindingDescription.mBindingId);
        assertEquals(208, vertexBindingDescription.mSize);
    }

    @Test
    public void testGetShaderSet() {
        assertTrue(
                (new PBRHighlightMaterial()).getShaderSet()
                        instanceof PBRHighlightMaterial.HighlightShaderSet);
    }

    @Test
    public void testGetShaderSet2() {
        PBRHighlightMaterial pbrHighlightMaterial =
                new PBRHighlightMaterial(new SampledTexture("Texture Name"));
        pbrHighlightMaterial.setAlphaBlend(true);
        assertTrue(
                pbrHighlightMaterial.getShaderSet()
                        instanceof PBRHighlightMaterial.HighlightShaderSet);
    }
}
